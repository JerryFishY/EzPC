def void ElemWiseMul6(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl s6, 
int64_al[s1][s2][s3][s4][s5][s6] arr1, int64_al[s1][s2][s3][s4][s5][s6] arr2, int64_al[s1][s2][s3][s4][s5][s6] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4*s5*s6 ;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3] {
				for i4=[0:s4] {
					for i5=[0:s5] {
						for i6=[0:s6] {
							int32_pl linIdx = (i1*s2*s3*s4*s5*s6) + (i2*s3*s4*s5*s6) + (i3*s4*s5*s6) + (i4*s5*s6) + (i5*s6) + i6 ;
							arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5][i6] ;
							arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5][i6] ;
						} ;
					} ;
				} ;
			} ;
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped) ;

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3] {
				for i4=[0:s4] {
					for i5=[0:s5] {
						for i6=[0:s6] {
							int32_pl linIdx = (i1*s2*s3*s4*s5*s6) + (i2*s3*s4*s5*s6) + (i3*s4*s5*s6) + (i4*s5*s6) + (i5*s6) + i6 ;
							outArr[i1][i2][i3][i4][i5][i6] = outArrReshaped[linIdx] ;
						} ;
					} ;
				} ;
			} ;
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}


def void ElemWiseMul7(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl s6, int32_pl s7, 
int64_al[s1][s2][s3][s4][s5][s6][s7] arr1, int64_al[s1][s2][s3][s4][s5][s6][s7] arr2, int64_al[s1][s2][s3][s4][s5][s6][s7] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4*s5*s6*s7 ;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3] {
				for i4=[0:s4] {
					for i5=[0:s5] {
						for i6=[0:s6] {
							for i7=[0:s7] {
								int32_pl linIdx = (i1*s2*s3*s4*s5*s6*s7) + (i2*s3*s4*s5*s6*s7) + (i3*s4*s5*s6*s7) + (i4*s5*s6*s7) + (i5*s6*s7) + (i6*s7) + i7 ;
								arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5][i6][i7] ;
								arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5][i6][i7] ;
							} ;
						} ;
					} ;
				} ;
			} ;
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped) ;

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3] {
				for i4=[0:s4] {
					for i5=[0:s5] {
						for i6=[0:s6] {
							for i7=[0:s7] {
								int32_pl linIdx = (i1*s2*s3*s4*s5*s6*s7) + (i2*s3*s4*s5*s6*s7) + (i3*s4*s5*s6*s7) + (i4*s5*s6*s7) + (i5*s6*s7) + (i6*s7) + i7 ;
								outArr[i1][i2][i3][i4][i5][i6][i7] = outArrReshaped[linIdx] ;
							} ;
						} ;
					} ;
				} ;
			} ;
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}


def void WinogradM4R3ImageTransform(int64_al[6][6] D, int64_al[6][6] M) {

	M[0][0] = 16L*D[0][0] - 20L*D[0][2] + 4L*D[0][4] - 20L*D[2][0] + 25L*D[2][2] - 5L*D[2][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
	M[0][1] = 16L*D[0][1] + 16L*D[0][2] - 4L*D[0][3] - 4L*D[0][4] - 20L*D[2][1] - 20L*D[2][2] + 5L*D[2][3] + 5L*D[2][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
	M[0][2] = 16L*D[0][1] - 16L*D[0][2] - 4L*D[0][3] + 4L*D[0][4] - 20L*D[2][1] + 20L*D[2][2] + 5L*D[2][3] - 5L*D[2][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
	M[0][3] = 8L*D[0][1] + 4L*D[0][2] - 8L*D[0][3] - 4L*D[0][4] - 10L*D[2][1] - 5L*D[2][2] + 10L*D[2][3] + 5L*D[2][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
	M[0][4] = 8L*D[0][1] - 4L*D[0][2] - 8L*D[0][3] + 4L*D[0][4] - 10L*D[2][1] + 5L*D[2][2] + 10L*D[2][3] - 5L*D[2][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
	M[0][5] = 16L*D[0][1] - 20L*D[0][3] + 4L*D[0][5] - 20L*D[2][1] + 25L*D[2][3] - 5L*D[2][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
	M[1][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] + 16L*D[2][0] - 20L*D[2][2] + 4L*D[2][4] - 4L*D[3][0] + 5L*D[3][2] - D[3][4] - 4L*D[4][0] + 5L*D[4][2] - D[4][4] ;
	M[1][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] + 16L*D[2][1] + 16L*D[2][2] - 4L*D[2][3] - 4L*D[2][4] - 4L*D[3][1] - 4L*D[3][2] + D[3][3] + D[3][4] - 4L*D[4][1] - 4L*D[4][2] + D[4][3] + D[4][4] ;
	M[1][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] + 16L*D[2][1] - 16L*D[2][2] - 4L*D[2][3] + 4L*D[2][4] - 4L*D[3][1] + 4L*D[3][2] + D[3][3] - D[3][4] - 4L*D[4][1] + 4L*D[4][2] + D[4][3] - D[4][4] ;
	M[1][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] + 8L*D[2][1] + 4L*D[2][2] - 8L*D[2][3] - 4L*D[2][4] - 2L*D[3][1] - D[3][2] + 2L*D[3][3] + D[3][4] - 2L*D[4][1] - D[4][2] + 2L*D[4][3] + D[4][4] ;
	M[1][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] + 8L*D[2][1] - 4L*D[2][2] - 8L*D[2][3] + 4L*D[2][4] - 2L*D[3][1] + D[3][2] + 2L*D[3][3] - D[3][4] - 2L*D[4][1] + D[4][2] + 2L*D[4][3] - D[4][4] ;
	M[1][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] + 16L*D[2][1] - 20L*D[2][3] + 4L*D[2][5] - 4L*D[3][1] + 5L*D[3][3] - D[3][5] - 4L*D[4][1] + 5L*D[4][3] - D[4][5] ;
	M[2][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] - 16L*D[2][0] + 20L*D[2][2] - 4L*D[2][4] - 4L*D[3][0] + 5L*D[3][2] - D[3][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
	M[2][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] - 16L*D[2][1] - 16L*D[2][2] + 4L*D[2][3] + 4L*D[2][4] - 4L*D[3][1] - 4L*D[3][2] + D[3][3] + D[3][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
	M[2][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] - 16L*D[2][1] + 16L*D[2][2] + 4L*D[2][3] - 4L*D[2][4] - 4L*D[3][1] + 4L*D[3][2] + D[3][3] - D[3][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
	M[2][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] - 8L*D[2][1] - 4L*D[2][2] + 8L*D[2][3] + 4L*D[2][4] - 2L*D[3][1] - D[3][2] + 2L*D[3][3] + D[3][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
	M[2][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] - 8L*D[2][1] + 4L*D[2][2] + 8L*D[2][3] - 4L*D[2][4] - 2L*D[3][1] + D[3][2] + 2L*D[3][3] - D[3][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
	M[2][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] - 16L*D[2][1] + 20L*D[2][3] - 4L*D[2][5] - 4L*D[3][1] + 5L*D[3][3] - D[3][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
	M[3][0] = 8L*D[1][0] - 10L*D[1][2] + 2L*D[1][4] + 4L*D[2][0] - 5L*D[2][2] + D[2][4] - 8L*D[3][0] + 10L*D[3][2] - 2L*D[3][4] - 4L*D[4][0] + 5L*D[4][2] - D[4][4] ;
	M[3][1] = 8L*D[1][1] + 8L*D[1][2] - 2L*D[1][3] - 2L*D[1][4] + 4L*D[2][1] + 4L*D[2][2] - D[2][3] - D[2][4] - 8L*D[3][1] - 8L*D[3][2] + 2L*D[3][3] + 2L*D[3][4] - 4L*D[4][1] - 4L*D[4][2] + D[4][3] + D[4][4] ;
	M[3][2] = 8L*D[1][1] - 8L*D[1][2] - 2L*D[1][3] + 2L*D[1][4] + 4L*D[2][1] - 4L*D[2][2] - D[2][3] + D[2][4] - 8L*D[3][1] + 8L*D[3][2] + 2L*D[3][3] - 2L*D[3][4] - 4L*D[4][1] + 4L*D[4][2] + D[4][3] - D[4][4] ;
	M[3][3] = 4L*D[1][1] + 2L*D[1][2] - 4L*D[1][3] - 2L*D[1][4] + 2L*D[2][1] + D[2][2] - 2L*D[2][3] - D[2][4] - 4L*D[3][1] - 2L*D[3][2] + 4L*D[3][3] + 2L*D[3][4] - 2L*D[4][1] - D[4][2] + 2L*D[4][3] + D[4][4] ;
	M[3][4] = 4L*D[1][1] - 2L*D[1][2] - 4L*D[1][3] + 2L*D[1][4] + 2L*D[2][1] - D[2][2] - 2L*D[2][3] + D[2][4] - 4L*D[3][1] + 2L*D[3][2] + 4L*D[3][3] - 2L*D[3][4] - 2L*D[4][1] + D[4][2] + 2L*D[4][3] - D[4][4] ;
	M[3][5] = 8L*D[1][1] - 10L*D[1][3] + 2L*D[1][5] + 4L*D[2][1] - 5L*D[2][3] + D[2][5] - 8L*D[3][1] + 10L*D[3][3] - 2L*D[3][5] - 4L*D[4][1] + 5L*D[4][3] - D[4][5] ;
	M[4][0] = 8L*D[1][0] - 10L*D[1][2] + 2L*D[1][4] - 4L*D[2][0] + 5L*D[2][2] - D[2][4] - 8L*D[3][0] + 10L*D[3][2] - 2L*D[3][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
	M[4][1] = 8L*D[1][1] + 8L*D[1][2] - 2L*D[1][3] - 2L*D[1][4] - 4L*D[2][1] - 4L*D[2][2] + D[2][3] + D[2][4] - 8L*D[3][1] - 8L*D[3][2] + 2L*D[3][3] + 2L*D[3][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
	M[4][2] = 8L*D[1][1] - 8L*D[1][2] - 2L*D[1][3] + 2L*D[1][4] - 4L*D[2][1] + 4L*D[2][2] + D[2][3] - D[2][4] - 8L*D[3][1] + 8L*D[3][2] + 2L*D[3][3] - 2L*D[3][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
	M[4][3] = 4L*D[1][1] + 2L*D[1][2] - 4L*D[1][3] - 2L*D[1][4] - 2L*D[2][1] - D[2][2] + 2L*D[2][3] + D[2][4] - 4L*D[3][1] - 2L*D[3][2] + 4L*D[3][3] + 2L*D[3][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
	M[4][4] = 4L*D[1][1] - 2L*D[1][2] - 4L*D[1][3] + 2L*D[1][4] - 2L*D[2][1] + D[2][2] + 2L*D[2][3] - D[2][4] - 4L*D[3][1] + 2L*D[3][2] + 4L*D[3][3] - 2L*D[3][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
	M[4][5] = 8L*D[1][1] - 10L*D[1][3] + 2L*D[1][5] - 4L*D[2][1] + 5L*D[2][3] - D[2][5] - 8L*D[3][1] + 10L*D[3][3] - 2L*D[3][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
	M[5][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] - 20L*D[3][0] + 25L*D[3][2] - 5L*D[3][4] + 4L*D[5][0] - 5L*D[5][2] + D[5][4] ;
	M[5][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] - 20L*D[3][1] - 20L*D[3][2] + 5L*D[3][3] + 5L*D[3][4] + 4L*D[5][1] + 4L*D[5][2] - D[5][3] - D[5][4] ;
	M[5][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] - 20L*D[3][1] + 20L*D[3][2] + 5L*D[3][3] - 5L*D[3][4] + 4L*D[5][1] - 4L*D[5][2] - D[5][3] + D[5][4] ;
	M[5][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] - 10L*D[3][1] - 5L*D[3][2] + 10L*D[3][3] + 5L*D[3][4] + 2L*D[5][1] + D[5][2] - 2L*D[5][3] - D[5][4] ;
	M[5][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] - 10L*D[3][1] + 5L*D[3][2] + 10L*D[3][3] - 5L*D[3][4] + 2L*D[5][1] - D[5][2] - 2L*D[5][3] + D[5][4] ;
	M[5][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] - 20L*D[3][1] + 25L*D[3][3] - 5L*D[3][5] + 4L*D[5][1] - 5L*D[5][3] + D[5][5] ;


}

def void WinogradM4R3OutputTransform(int64_al[6][6] M, int64_al[4][4] C) {
	C[0][0] = M[0][0] + M[0][1] + M[0][2] + M[0][3] + M[0][4] + M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] + M[2][0] + M[2][1] + M[2][2] + M[2][3] + M[2][4] + M[3][0] + M[3][1] + M[3][2] + M[3][3] + M[3][4] + M[4][0] + M[4][1] + M[4][2] + M[4][3] + M[4][4] ;
	C[0][1] = M[0][1] - M[0][2] + 2L*M[0][3] - 2L*M[0][4] + M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] + M[2][1] - M[2][2] + 2L*M[2][3] - 2L*M[2][4] + M[3][1] - M[3][2] + 2L*M[3][3] - 2L*M[3][4] + M[4][1] - M[4][2] + 2L*M[4][3] - 2L*M[4][4] ;
	C[0][2] = M[0][1] + M[0][2] + 4L*M[0][3] + 4L*M[0][4] + M[1][1] + M[1][2] + 4L*M[1][3] + 4L*M[1][4] + M[2][1] + M[2][2] + 4L*M[2][3] + 4L*M[2][4] + M[3][1] + M[3][2] + 4L*M[3][3] + 4L*M[3][4] + M[4][1] + M[4][2] + 4L*M[4][3] + 4L*M[4][4] ;
	C[0][3] = M[0][1] - M[0][2] + 8L*M[0][3] - 8L*M[0][4] + M[0][5] + M[1][1] - M[1][2] + 8L*M[1][3] - 8L*M[1][4] + M[1][5] + M[2][1] - M[2][2] + 8L*M[2][3] - 8L*M[2][4] + M[2][5] + M[3][1] - M[3][2] + 8L*M[3][3] - 8L*M[3][4] + M[3][5] + M[4][1] - M[4][2] + 8L*M[4][3] - 8L*M[4][4] + M[4][5] ;
	C[1][0] = M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] - M[2][0] - M[2][1] - M[2][2] - M[2][3] - M[2][4] + 2L*M[3][0] + 2L*M[3][1] + 2L*M[3][2] + 2L*M[3][3] + 2L*M[3][4] - 2L*M[4][0] - 2L*M[4][1] - 2L*M[4][2] - 2L*M[4][3] - 2L*M[4][4] ;
	C[1][1] = M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] - M[2][1] + M[2][2] - 2L*M[2][3] + 2L*M[2][4] + 2L*M[3][1] - 2L*M[3][2] + 4L*M[3][3] - 4L*M[3][4] - 2L*M[4][1] + 2L*M[4][2] - 4L*M[4][3] + 4L*M[4][4] ;
	C[1][2] = M[1][1] + M[1][2] + 4L*M[1][3] + 4L*M[1][4] - M[2][1] - M[2][2] - 4L*M[2][3] - 4L*M[2][4] + 2L*M[3][1] + 2L*M[3][2] + 8L*M[3][3] + 8L*M[3][4] - 2L*M[4][1] - 2L*M[4][2] - 8L*M[4][3] - 8L*M[4][4] ;
	C[1][3] = M[1][1] - M[1][2] + 8L*M[1][3] - 8L*M[1][4] + M[1][5] - M[2][1] + M[2][2] - 8L*M[2][3] + 8L*M[2][4] - M[2][5] + 2L*M[3][1] - 2L*M[3][2] + 16L*M[3][3] - 16L*M[3][4] + 2L*M[3][5] - 2L*M[4][1] + 2L*M[4][2] - 16L*M[4][3] + 16L*M[4][4] - 2L*M[4][5] ;
	C[2][0] = M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] + M[2][0] + M[2][1] + M[2][2] + M[2][3] + M[2][4] + 4L*M[3][0] + 4L*M[3][1] + 4L*M[3][2] + 4L*M[3][3] + 4L*M[3][4] + 4L*M[4][0] + 4L*M[4][1] + 4L*M[4][2] + 4L*M[4][3] + 4L*M[4][4] ;
	C[2][1] = M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] + M[2][1] - M[2][2] + 2L*M[2][3] - 2L*M[2][4] + 4L*M[3][1] - 4L*M[3][2] + 8L*M[3][3] - 8L*M[3][4] + 4L*M[4][1] - 4L*M[4][2] + 8L*M[4][3] - 8L*M[4][4] ;
	C[2][2] = M[1][1] + M[1][2] + 4L*M[1][3] + 4L*M[1][4] + M[2][1] + M[2][2] + 4L*M[2][3] + 4L*M[2][4] + 4L*M[3][1] + 4L*M[3][2] + 16L*M[3][3] + 16L*M[3][4] + 4L*M[4][1] + 4L*M[4][2] + 16L*M[4][3] + 16L*M[4][4] ;
	C[2][3] = M[1][1] - M[1][2] + 8L*M[1][3] - 8L*M[1][4] + M[1][5] + M[2][1] - M[2][2] + 8L*M[2][3] - 8L*M[2][4] + M[2][5] + 4L*M[3][1] - 4L*M[3][2] + 32L*M[3][3] - 32L*M[3][4] + 4L*M[3][5] + 4L*M[4][1] - 4L*M[4][2] + 32L*M[4][3] - 32L*M[4][4] + 4L*M[4][5] ;
	C[3][0] = M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] - M[2][0] - M[2][1] - M[2][2] - M[2][3] - M[2][4] + 8L*M[3][0] + 8L*M[3][1] + 8L*M[3][2] + 8L*M[3][3] + 8L*M[3][4] - 8L*M[4][0] - 8L*M[4][1] - 8L*M[4][2] - 8L*M[4][3] - 8L*M[4][4] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] ;
	C[3][1] = M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] - M[2][1] + M[2][2] - 2L*M[2][3] + 2L*M[2][4] + 8L*M[3][1] - 8L*M[3][2] + 16L*M[3][3] - 16L*M[3][4] - 8L*M[4][1] + 8L*M[4][2] - 16L*M[4][3] + 16L*M[4][4] + M[5][1] - M[5][2] + 2L*M[5][3] - 2L*M[5][4] ;
	C[3][2] = M[1][1] + M[1][2] + 4L*M[1][3] + 4L*M[1][4] - M[2][1] - M[2][2] - 4L*M[2][3] - 4L*M[2][4] + 8L*M[3][1] + 8L*M[3][2] + 32L*M[3][3] + 32L*M[3][4] - 8L*M[4][1] - 8L*M[4][2] - 32L*M[4][3] - 32L*M[4][4] + M[5][1] + M[5][2] + 4L*M[5][3] + 4L*M[5][4] ;
	C[3][3] = M[1][1] - M[1][2] + 8L*M[1][3] - 8L*M[1][4] + M[1][5] - M[2][1] + M[2][2] - 8L*M[2][3] + 8L*M[2][4] - M[2][5] + 8L*M[3][1] - 8L*M[3][2] + 64L*M[3][3] - 64L*M[3][4] + 8L*M[3][5] - 8L*M[4][1] + 8L*M[4][2] - 64L*M[4][3] + 64L*M[4][4] - 8L*M[4][5] + M[5][1] - M[5][2] + 8L*M[5][3] - 8L*M[5][4] + M[5][5] ;
}

def void WinogradM2R5ImageTransform(int64_al[6][6] D, int64_al[6][6] M) {

M[0][0] = 16L*D[0][0] - 20L*D[0][2] + 4L*D[0][4] - 20L*D[2][0] + 25L*D[2][2] - 5L*D[2][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
M[0][1] = 16L*D[0][1] + 16L*D[0][2] - 4L*D[0][3] - 4L*D[0][4] - 20L*D[2][1] - 20L*D[2][2] + 5L*D[2][3] + 5L*D[2][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
M[0][2] = 16L*D[0][1] - 16L*D[0][2] - 4L*D[0][3] + 4L*D[0][4] - 20L*D[2][1] + 20L*D[2][2] + 5L*D[2][3] - 5L*D[2][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
M[0][3] = 8L*D[0][1] + 4L*D[0][2] - 8L*D[0][3] - 4L*D[0][4] - 10L*D[2][1] - 5L*D[2][2] + 10L*D[2][3] + 5L*D[2][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
M[0][4] = 8L*D[0][1] - 4L*D[0][2] - 8L*D[0][3] + 4L*D[0][4] - 10L*D[2][1] + 5L*D[2][2] + 10L*D[2][3] - 5L*D[2][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
M[0][5] = 16L*D[0][1] - 20L*D[0][3] + 4L*D[0][5] - 20L*D[2][1] + 25L*D[2][3] - 5L*D[2][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
M[1][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] + 16L*D[2][0] - 20L*D[2][2] + 4L*D[2][4] - 4L*D[3][0] + 5L*D[3][2] - D[3][4] - 4L*D[4][0] + 5L*D[4][2] - D[4][4] ;
M[1][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] + 16L*D[2][1] + 16L*D[2][2] - 4L*D[2][3] - 4L*D[2][4] - 4L*D[3][1] - 4L*D[3][2] + D[3][3] + D[3][4] - 4L*D[4][1] - 4L*D[4][2] + D[4][3] + D[4][4] ;
M[1][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] + 16L*D[2][1] - 16L*D[2][2] - 4L*D[2][3] + 4L*D[2][4] - 4L*D[3][1] + 4L*D[3][2] + D[3][3] - D[3][4] - 4L*D[4][1] + 4L*D[4][2] + D[4][3] - D[4][4] ;
M[1][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] + 8L*D[2][1] + 4L*D[2][2] - 8L*D[2][3] - 4L*D[2][4] - 2L*D[3][1] - D[3][2] + 2L*D[3][3] + D[3][4] - 2L*D[4][1] - D[4][2] + 2L*D[4][3] + D[4][4] ;
M[1][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] + 8L*D[2][1] - 4L*D[2][2] - 8L*D[2][3] + 4L*D[2][4] - 2L*D[3][1] + D[3][2] + 2L*D[3][3] - D[3][4] - 2L*D[4][1] + D[4][2] + 2L*D[4][3] - D[4][4] ;
M[1][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] + 16L*D[2][1] - 20L*D[2][3] + 4L*D[2][5] - 4L*D[3][1] + 5L*D[3][3] - D[3][5] - 4L*D[4][1] + 5L*D[4][3] - D[4][5] ;
M[2][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] - 16L*D[2][0] + 20L*D[2][2] - 4L*D[2][4] - 4L*D[3][0] + 5L*D[3][2] - D[3][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
M[2][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] - 16L*D[2][1] - 16L*D[2][2] + 4L*D[2][3] + 4L*D[2][4] - 4L*D[3][1] - 4L*D[3][2] + D[3][3] + D[3][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
M[2][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] - 16L*D[2][1] + 16L*D[2][2] + 4L*D[2][3] - 4L*D[2][4] - 4L*D[3][1] + 4L*D[3][2] + D[3][3] - D[3][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
M[2][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] - 8L*D[2][1] - 4L*D[2][2] + 8L*D[2][3] + 4L*D[2][4] - 2L*D[3][1] - D[3][2] + 2L*D[3][3] + D[3][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
M[2][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] - 8L*D[2][1] + 4L*D[2][2] + 8L*D[2][3] - 4L*D[2][4] - 2L*D[3][1] + D[3][2] + 2L*D[3][3] - D[3][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
M[2][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] - 16L*D[2][1] + 20L*D[2][3] - 4L*D[2][5] - 4L*D[3][1] + 5L*D[3][3] - D[3][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
M[3][0] = 8L*D[1][0] - 10L*D[1][2] + 2L*D[1][4] + 4L*D[2][0] - 5L*D[2][2] + D[2][4] - 8L*D[3][0] + 10L*D[3][2] - 2L*D[3][4] - 4L*D[4][0] + 5L*D[4][2] - D[4][4] ;
M[3][1] = 8L*D[1][1] + 8L*D[1][2] - 2L*D[1][3] - 2L*D[1][4] + 4L*D[2][1] + 4L*D[2][2] - D[2][3] - D[2][4] - 8L*D[3][1] - 8L*D[3][2] + 2L*D[3][3] + 2L*D[3][4] - 4L*D[4][1] - 4L*D[4][2] + D[4][3] + D[4][4] ;
M[3][2] = 8L*D[1][1] - 8L*D[1][2] - 2L*D[1][3] + 2L*D[1][4] + 4L*D[2][1] - 4L*D[2][2] - D[2][3] + D[2][4] - 8L*D[3][1] + 8L*D[3][2] + 2L*D[3][3] - 2L*D[3][4] - 4L*D[4][1] + 4L*D[4][2] + D[4][3] - D[4][4] ;
M[3][3] = 4L*D[1][1] + 2L*D[1][2] - 4L*D[1][3] - 2L*D[1][4] + 2L*D[2][1] + D[2][2] - 2L*D[2][3] - D[2][4] - 4L*D[3][1] - 2L*D[3][2] + 4L*D[3][3] + 2L*D[3][4] - 2L*D[4][1] - D[4][2] + 2L*D[4][3] + D[4][4] ;
M[3][4] = 4L*D[1][1] - 2L*D[1][2] - 4L*D[1][3] + 2L*D[1][4] + 2L*D[2][1] - D[2][2] - 2L*D[2][3] + D[2][4] - 4L*D[3][1] + 2L*D[3][2] + 4L*D[3][3] - 2L*D[3][4] - 2L*D[4][1] + D[4][2] + 2L*D[4][3] - D[4][4] ;
M[3][5] = 8L*D[1][1] - 10L*D[1][3] + 2L*D[1][5] + 4L*D[2][1] - 5L*D[2][3] + D[2][5] - 8L*D[3][1] + 10L*D[3][3] - 2L*D[3][5] - 4L*D[4][1] + 5L*D[4][3] - D[4][5] ;
M[4][0] = 8L*D[1][0] - 10L*D[1][2] + 2L*D[1][4] - 4L*D[2][0] + 5L*D[2][2] - D[2][4] - 8L*D[3][0] + 10L*D[3][2] - 2L*D[3][4] + 4L*D[4][0] - 5L*D[4][2] + D[4][4] ;
M[4][1] = 8L*D[1][1] + 8L*D[1][2] - 2L*D[1][3] - 2L*D[1][4] - 4L*D[2][1] - 4L*D[2][2] + D[2][3] + D[2][4] - 8L*D[3][1] - 8L*D[3][2] + 2L*D[3][3] + 2L*D[3][4] + 4L*D[4][1] + 4L*D[4][2] - D[4][3] - D[4][4] ;
M[4][2] = 8L*D[1][1] - 8L*D[1][2] - 2L*D[1][3] + 2L*D[1][4] - 4L*D[2][1] + 4L*D[2][2] + D[2][3] - D[2][4] - 8L*D[3][1] + 8L*D[3][2] + 2L*D[3][3] - 2L*D[3][4] + 4L*D[4][1] - 4L*D[4][2] - D[4][3] + D[4][4] ;
M[4][3] = 4L*D[1][1] + 2L*D[1][2] - 4L*D[1][3] - 2L*D[1][4] - 2L*D[2][1] - D[2][2] + 2L*D[2][3] + D[2][4] - 4L*D[3][1] - 2L*D[3][2] + 4L*D[3][3] + 2L*D[3][4] + 2L*D[4][1] + D[4][2] - 2L*D[4][3] - D[4][4] ;
M[4][4] = 4L*D[1][1] - 2L*D[1][2] - 4L*D[1][3] + 2L*D[1][4] - 2L*D[2][1] + D[2][2] + 2L*D[2][3] - D[2][4] - 4L*D[3][1] + 2L*D[3][2] + 4L*D[3][3] - 2L*D[3][4] + 2L*D[4][1] - D[4][2] - 2L*D[4][3] + D[4][4] ;
M[4][5] = 8L*D[1][1] - 10L*D[1][3] + 2L*D[1][5] - 4L*D[2][1] + 5L*D[2][3] - D[2][5] - 8L*D[3][1] + 10L*D[3][3] - 2L*D[3][5] + 4L*D[4][1] - 5L*D[4][3] + D[4][5] ;
M[5][0] = 16L*D[1][0] - 20L*D[1][2] + 4L*D[1][4] - 20L*D[3][0] + 25L*D[3][2] - 5L*D[3][4] + 4L*D[5][0] - 5L*D[5][2] + D[5][4] ;
M[5][1] = 16L*D[1][1] + 16L*D[1][2] - 4L*D[1][3] - 4L*D[1][4] - 20L*D[3][1] - 20L*D[3][2] + 5L*D[3][3] + 5L*D[3][4] + 4L*D[5][1] + 4L*D[5][2] - D[5][3] - D[5][4] ;
M[5][2] = 16L*D[1][1] - 16L*D[1][2] - 4L*D[1][3] + 4L*D[1][4] - 20L*D[3][1] + 20L*D[3][2] + 5L*D[3][3] - 5L*D[3][4] + 4L*D[5][1] - 4L*D[5][2] - D[5][3] + D[5][4] ;
M[5][3] = 8L*D[1][1] + 4L*D[1][2] - 8L*D[1][3] - 4L*D[1][4] - 10L*D[3][1] - 5L*D[3][2] + 10L*D[3][3] + 5L*D[3][4] + 2L*D[5][1] + D[5][2] - 2L*D[5][3] - D[5][4] ;
M[5][4] = 8L*D[1][1] - 4L*D[1][2] - 8L*D[1][3] + 4L*D[1][4] - 10L*D[3][1] + 5L*D[3][2] + 10L*D[3][3] - 5L*D[3][4] + 2L*D[5][1] - D[5][2] - 2L*D[5][3] + D[5][4] ;
M[5][5] = 16L*D[1][1] - 20L*D[1][3] + 4L*D[1][5] - 20L*D[3][1] + 25L*D[3][3] - 5L*D[3][5] + 4L*D[5][1] - 5L*D[5][3] + D[5][5] ;

}

def void WinogradM2R5OutputTransform(int64_al[6][6] M, int64_al[2][2] C) {

C[0][0] = M[0][0] + M[0][1] + M[0][2] + M[0][3] + M[0][4] + M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] + M[2][0] + M[2][1] + M[2][2] + M[2][3] + M[2][4] + M[3][0] + M[3][1] + M[3][2] + M[3][3] + M[3][4] + M[4][0] + M[4][1] + M[4][2] + M[4][3] + M[4][4] ;
C[0][1] = M[0][1] - M[0][2] + 2L*M[0][3] - 2L*M[0][4] + M[0][5] + M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] + M[1][5] + M[2][1] - M[2][2] + 2L*M[2][3] - 2L*M[2][4] + M[2][5] + M[3][1] - M[3][2] + 2L*M[3][3] - 2L*M[3][4] + M[3][5] + M[4][1] - M[4][2] + 2L*M[4][3] - 2L*M[4][4] + M[4][5] ;
C[1][0] = M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] - M[2][0] - M[2][1] - M[2][2] - M[2][3] - M[2][4] + 2L*M[3][0] + 2L*M[3][1] + 2L*M[3][2] + 2L*M[3][3] + 2L*M[3][4] - 2L*M[4][0] - 2L*M[4][1] - 2L*M[4][2] - 2L*M[4][3] - 2L*M[4][4] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] ;
C[1][1] = M[1][1] - M[1][2] + 2L*M[1][3] - 2L*M[1][4] + M[1][5] - M[2][1] + M[2][2] - 2L*M[2][3] + 2L*M[2][4] - M[2][5] + 2L*M[3][1] - 2L*M[3][2] + 4L*M[3][3] - 4L*M[3][4] + 2L*M[3][5] - 2L*M[4][1] + 2L*M[4][2] - 4L*M[4][3] + 4L*M[4][4] - 2L*M[4][5] + M[5][1] - M[5][2] + 2L*M[5][3] - 2L*M[5][4] + M[5][5] ;

}

def void WinogradM4R5ImageTransform(int64_al[8][8] D, int64_al[8][8] M) {

M[0][0] = 16L*D[0][0] - 84L*D[0][2] + 84L*D[0][4] - 16L*D[0][6] - 84L*D[2][0] + 441L*D[2][2] - 441L*D[2][4] + 84L*D[2][6] + 84L*D[4][0] - 441L*D[4][2] + 441L*D[4][4] - 84L*D[4][6] - 16L*D[6][0] + 84L*D[6][2] - 84L*D[6][4] + 16L*D[6][6] ;
M[0][1] = 16L*D[0][1] + 16L*D[0][2] - 68L*D[0][3] - 68L*D[0][4] + 16L*D[0][5] + 16L*D[0][6] - 84L*D[2][1] - 84L*D[2][2] + 357L*D[2][3] + 357L*D[2][4] - 84L*D[2][5] - 84L*D[2][6] + 84L*D[4][1] + 84L*D[4][2] - 357L*D[4][3] - 357L*D[4][4] + 84L*D[4][5] + 84L*D[4][6] - 16L*D[6][1] - 16L*D[6][2] + 68L*D[6][3] + 68L*D[6][4] - 16L*D[6][5] - 16L*D[6][6] ;
M[0][2] = 16L*D[0][1] - 16L*D[0][2] - 68L*D[0][3] + 68L*D[0][4] + 16L*D[0][5] - 16L*D[0][6] - 84L*D[2][1] + 84L*D[2][2] + 357L*D[2][3] - 357L*D[2][4] - 84L*D[2][5] + 84L*D[2][6] + 84L*D[4][1] - 84L*D[4][2] - 357L*D[4][3] + 357L*D[4][4] + 84L*D[4][5] - 84L*D[4][6] - 16L*D[6][1] + 16L*D[6][2] + 68L*D[6][3] - 68L*D[6][4] - 16L*D[6][5] + 16L*D[6][6] ;
M[0][3] = 8L*D[0][1] + 4L*D[0][2] - 40L*D[0][3] - 20L*D[0][4] + 32L*D[0][5] + 16L*D[0][6] - 42L*D[2][1] - 21L*D[2][2] + 210L*D[2][3] + 105L*D[2][4] - 168L*D[2][5] - 84L*D[2][6] + 42L*D[4][1] + 21L*D[4][2] - 210L*D[4][3] - 105L*D[4][4] + 168L*D[4][5] + 84L*D[4][6] - 8L*D[6][1] - 4L*D[6][2] + 40L*D[6][3] + 20L*D[6][4] - 32L*D[6][5] - 16L*D[6][6] ;
M[0][4] = 8L*D[0][1] - 4L*D[0][2] - 40L*D[0][3] + 20L*D[0][4] + 32L*D[0][5] - 16L*D[0][6] - 42L*D[2][1] + 21L*D[2][2] + 210L*D[2][3] - 105L*D[2][4] - 168L*D[2][5] + 84L*D[2][6] + 42L*D[4][1] - 21L*D[4][2] - 210L*D[4][3] + 105L*D[4][4] + 168L*D[4][5] - 84L*D[4][6] - 8L*D[6][1] + 4L*D[6][2] + 40L*D[6][3] - 20L*D[6][4] - 32L*D[6][5] + 16L*D[6][6] ;
M[0][5] = 16L*D[0][1] + 32L*D[0][2] - 20L*D[0][3] - 40L*D[0][4] + 4L*D[0][5] + 8L*D[0][6] - 84L*D[2][1] - 168L*D[2][2] + 105L*D[2][3] + 210L*D[2][4] - 21L*D[2][5] - 42L*D[2][6] + 84L*D[4][1] + 168L*D[4][2] - 105L*D[4][3] - 210L*D[4][4] + 21L*D[4][5] + 42L*D[4][6] - 16L*D[6][1] - 32L*D[6][2] + 20L*D[6][3] + 40L*D[6][4] - 4L*D[6][5] - 8L*D[6][6] ;
M[0][6] = 16L*D[0][1] - 32L*D[0][2] - 20L*D[0][3] + 40L*D[0][4] + 4L*D[0][5] - 8L*D[0][6] - 84L*D[2][1] + 168L*D[2][2] + 105L*D[2][3] - 210L*D[2][4] - 21L*D[2][5] + 42L*D[2][6] + 84L*D[4][1] - 168L*D[4][2] - 105L*D[4][3] + 210L*D[4][4] + 21L*D[4][5] - 42L*D[4][6] - 16L*D[6][1] + 32L*D[6][2] + 20L*D[6][3] - 40L*D[6][4] - 4L*D[6][5] + 8L*D[6][6] ;
M[0][7] = -16L*D[0][1] + 84L*D[0][3] - 84L*D[0][5] + 16L*D[0][7] + 84L*D[2][1] - 441L*D[2][3] + 441L*D[2][5] - 84L*D[2][7] - 84L*D[4][1] + 441L*D[4][3] - 441L*D[4][5] + 84L*D[4][7] + 16L*D[6][1] - 84L*D[6][3] + 84L*D[6][5] - 16L*D[6][7] ;
M[1][0] = 16L*D[1][0] - 84L*D[1][2] + 84L*D[1][4] - 16L*D[1][6] + 16L*D[2][0] - 84L*D[2][2] + 84L*D[2][4] - 16L*D[2][6] - 68L*D[3][0] + 357L*D[3][2] - 357L*D[3][4] + 68L*D[3][6] - 68L*D[4][0] + 357L*D[4][2] - 357L*D[4][4] + 68L*D[4][6] + 16L*D[5][0] - 84L*D[5][2] + 84L*D[5][4] - 16L*D[5][6] + 16L*D[6][0] - 84L*D[6][2] + 84L*D[6][4] - 16L*D[6][6] ;
M[1][1] = 16L*D[1][1] + 16L*D[1][2] - 68L*D[1][3] - 68L*D[1][4] + 16L*D[1][5] + 16L*D[1][6] + 16L*D[2][1] + 16L*D[2][2] - 68L*D[2][3] - 68L*D[2][4] + 16L*D[2][5] + 16L*D[2][6] - 68L*D[3][1] - 68L*D[3][2] + 289L*D[3][3] + 289L*D[3][4] - 68L*D[3][5] - 68L*D[3][6] - 68L*D[4][1] - 68L*D[4][2] + 289L*D[4][3] + 289L*D[4][4] - 68L*D[4][5] - 68L*D[4][6] + 16L*D[5][1] + 16L*D[5][2] - 68L*D[5][3] - 68L*D[5][4] + 16L*D[5][5] + 16L*D[5][6] + 16L*D[6][1] + 16L*D[6][2] - 68L*D[6][3] - 68L*D[6][4] + 16L*D[6][5] + 16L*D[6][6] ;
M[1][2] = 16L*D[1][1] - 16L*D[1][2] - 68L*D[1][3] + 68L*D[1][4] + 16L*D[1][5] - 16L*D[1][6] + 16L*D[2][1] - 16L*D[2][2] - 68L*D[2][3] + 68L*D[2][4] + 16L*D[2][5] - 16L*D[2][6] - 68L*D[3][1] + 68L*D[3][2] + 289L*D[3][3] - 289L*D[3][4] - 68L*D[3][5] + 68L*D[3][6] - 68L*D[4][1] + 68L*D[4][2] + 289L*D[4][3] - 289L*D[4][4] - 68L*D[4][5] + 68L*D[4][6] + 16L*D[5][1] - 16L*D[5][2] - 68L*D[5][3] + 68L*D[5][4] + 16L*D[5][5] - 16L*D[5][6] + 16L*D[6][1] - 16L*D[6][2] - 68L*D[6][3] + 68L*D[6][4] + 16L*D[6][5] - 16L*D[6][6] ;
M[1][3] = 8L*D[1][1] + 4L*D[1][2] - 40L*D[1][3] - 20L*D[1][4] + 32L*D[1][5] + 16L*D[1][6] + 8L*D[2][1] + 4L*D[2][2] - 40L*D[2][3] - 20L*D[2][4] + 32L*D[2][5] + 16L*D[2][6] - 34L*D[3][1] - 17L*D[3][2] + 170L*D[3][3] + 85L*D[3][4] - 136L*D[3][5] - 68L*D[3][6] - 34L*D[4][1] - 17L*D[4][2] + 170L*D[4][3] + 85L*D[4][4] - 136L*D[4][5] - 68L*D[4][6] + 8L*D[5][1] + 4L*D[5][2] - 40L*D[5][3] - 20L*D[5][4] + 32L*D[5][5] + 16L*D[5][6] + 8L*D[6][1] + 4L*D[6][2] - 40L*D[6][3] - 20L*D[6][4] + 32L*D[6][5] + 16L*D[6][6] ;
M[1][4] = 8L*D[1][1] - 4L*D[1][2] - 40L*D[1][3] + 20L*D[1][4] + 32L*D[1][5] - 16L*D[1][6] + 8L*D[2][1] - 4L*D[2][2] - 40L*D[2][3] + 20L*D[2][4] + 32L*D[2][5] - 16L*D[2][6] - 34L*D[3][1] + 17L*D[3][2] + 170L*D[3][3] - 85L*D[3][4] - 136L*D[3][5] + 68L*D[3][6] - 34L*D[4][1] + 17L*D[4][2] + 170L*D[4][3] - 85L*D[4][4] - 136L*D[4][5] + 68L*D[4][6] + 8L*D[5][1] - 4L*D[5][2] - 40L*D[5][3] + 20L*D[5][4] + 32L*D[5][5] - 16L*D[5][6] + 8L*D[6][1] - 4L*D[6][2] - 40L*D[6][3] + 20L*D[6][4] + 32L*D[6][5] - 16L*D[6][6] ;
M[1][5] = 16L*D[1][1] + 32L*D[1][2] - 20L*D[1][3] - 40L*D[1][4] + 4L*D[1][5] + 8L*D[1][6] + 16L*D[2][1] + 32L*D[2][2] - 20L*D[2][3] - 40L*D[2][4] + 4L*D[2][5] + 8L*D[2][6] - 68L*D[3][1] - 136L*D[3][2] + 85L*D[3][3] + 170L*D[3][4] - 17L*D[3][5] - 34L*D[3][6] - 68L*D[4][1] - 136L*D[4][2] + 85L*D[4][3] + 170L*D[4][4] - 17L*D[4][5] - 34L*D[4][6] + 16L*D[5][1] + 32L*D[5][2] - 20L*D[5][3] - 40L*D[5][4] + 4L*D[5][5] + 8L*D[5][6] + 16L*D[6][1] + 32L*D[6][2] - 20L*D[6][3] - 40L*D[6][4] + 4L*D[6][5] + 8L*D[6][6] ;
M[1][6] = 16L*D[1][1] - 32L*D[1][2] - 20L*D[1][3] + 40L*D[1][4] + 4L*D[1][5] - 8L*D[1][6] + 16L*D[2][1] - 32L*D[2][2] - 20L*D[2][3] + 40L*D[2][4] + 4L*D[2][5] - 8L*D[2][6] - 68L*D[3][1] + 136L*D[3][2] + 85L*D[3][3] - 170L*D[3][4] - 17L*D[3][5] + 34L*D[3][6] - 68L*D[4][1] + 136L*D[4][2] + 85L*D[4][3] - 170L*D[4][4] - 17L*D[4][5] + 34L*D[4][6] + 16L*D[5][1] - 32L*D[5][2] - 20L*D[5][3] + 40L*D[5][4] + 4L*D[5][5] - 8L*D[5][6] + 16L*D[6][1] - 32L*D[6][2] - 20L*D[6][3] + 40L*D[6][4] + 4L*D[6][5] - 8L*D[6][6] ;
M[1][7] = 16L*D[1][1] - 84L*D[1][3] + 84L*D[1][5] - 16L*D[1][7] + 16L*D[2][1] - 84L*D[2][3] + 84L*D[2][5] - 16L*D[2][7] - 68L*D[3][1] + 357L*D[3][3] - 357L*D[3][5] + 68L*D[3][7] - 68L*D[4][1] + 357L*D[4][3] - 357L*D[4][5] + 68L*D[4][7] + 16L*D[5][1] - 84L*D[5][3] + 84L*D[5][5] - 16L*D[5][7] + 16L*D[6][1] - 84L*D[6][3] + 84L*D[6][5] - 16L*D[6][7] ;
M[2][0] = 16L*D[1][0] - 84L*D[1][2] + 84L*D[1][4] - 16L*D[1][6] - 16L*D[2][0] + 84L*D[2][2] - 84L*D[2][4] + 16L*D[2][6] - 68L*D[3][0] + 357L*D[3][2] - 357L*D[3][4] + 68L*D[3][6] + 68L*D[4][0] - 357L*D[4][2] + 357L*D[4][4] - 68L*D[4][6] + 16L*D[5][0] - 84L*D[5][2] + 84L*D[5][4] - 16L*D[5][6] - 16L*D[6][0] + 84L*D[6][2] - 84L*D[6][4] + 16L*D[6][6] ;
M[2][1] = 16L*D[1][1] + 16L*D[1][2] - 68L*D[1][3] - 68L*D[1][4] + 16L*D[1][5] + 16L*D[1][6] - 16L*D[2][1] - 16L*D[2][2] + 68L*D[2][3] + 68L*D[2][4] - 16L*D[2][5] - 16L*D[2][6] - 68L*D[3][1] - 68L*D[3][2] + 289L*D[3][3] + 289L*D[3][4] - 68L*D[3][5] - 68L*D[3][6] + 68L*D[4][1] + 68L*D[4][2] - 289L*D[4][3] - 289L*D[4][4] + 68L*D[4][5] + 68L*D[4][6] + 16L*D[5][1] + 16L*D[5][2] - 68L*D[5][3] - 68L*D[5][4] + 16L*D[5][5] + 16L*D[5][6] - 16L*D[6][1] - 16L*D[6][2] + 68L*D[6][3] + 68L*D[6][4] - 16L*D[6][5] - 16L*D[6][6] ;
M[2][2] = 16L*D[1][1] - 16L*D[1][2] - 68L*D[1][3] + 68L*D[1][4] + 16L*D[1][5] - 16L*D[1][6] - 16L*D[2][1] + 16L*D[2][2] + 68L*D[2][3] - 68L*D[2][4] - 16L*D[2][5] + 16L*D[2][6] - 68L*D[3][1] + 68L*D[3][2] + 289L*D[3][3] - 289L*D[3][4] - 68L*D[3][5] + 68L*D[3][6] + 68L*D[4][1] - 68L*D[4][2] - 289L*D[4][3] + 289L*D[4][4] + 68L*D[4][5] - 68L*D[4][6] + 16L*D[5][1] - 16L*D[5][2] - 68L*D[5][3] + 68L*D[5][4] + 16L*D[5][5] - 16L*D[5][6] - 16L*D[6][1] + 16L*D[6][2] + 68L*D[6][3] - 68L*D[6][4] - 16L*D[6][5] + 16L*D[6][6] ;
M[2][3] = 8L*D[1][1] + 4L*D[1][2] - 40L*D[1][3] - 20L*D[1][4] + 32L*D[1][5] + 16L*D[1][6] - 8L*D[2][1] - 4L*D[2][2] + 40L*D[2][3] + 20L*D[2][4] - 32L*D[2][5] - 16L*D[2][6] - 34L*D[3][1] - 17L*D[3][2] + 170L*D[3][3] + 85L*D[3][4] - 136L*D[3][5] - 68L*D[3][6] + 34L*D[4][1] + 17L*D[4][2] - 170L*D[4][3] - 85L*D[4][4] + 136L*D[4][5] + 68L*D[4][6] + 8L*D[5][1] + 4L*D[5][2] - 40L*D[5][3] - 20L*D[5][4] + 32L*D[5][5] + 16L*D[5][6] - 8L*D[6][1] - 4L*D[6][2] + 40L*D[6][3] + 20L*D[6][4] - 32L*D[6][5] - 16L*D[6][6] ;
M[2][4] = 8L*D[1][1] - 4L*D[1][2] - 40L*D[1][3] + 20L*D[1][4] + 32L*D[1][5] - 16L*D[1][6] - 8L*D[2][1] + 4L*D[2][2] + 40L*D[2][3] - 20L*D[2][4] - 32L*D[2][5] + 16L*D[2][6] - 34L*D[3][1] + 17L*D[3][2] + 170L*D[3][3] - 85L*D[3][4] - 136L*D[3][5] + 68L*D[3][6] + 34L*D[4][1] - 17L*D[4][2] - 170L*D[4][3] + 85L*D[4][4] + 136L*D[4][5] - 68L*D[4][6] + 8L*D[5][1] - 4L*D[5][2] - 40L*D[5][3] + 20L*D[5][4] + 32L*D[5][5] - 16L*D[5][6] - 8L*D[6][1] + 4L*D[6][2] + 40L*D[6][3] - 20L*D[6][4] - 32L*D[6][5] + 16L*D[6][6] ;
M[2][5] = 16L*D[1][1] + 32L*D[1][2] - 20L*D[1][3] - 40L*D[1][4] + 4L*D[1][5] + 8L*D[1][6] - 16L*D[2][1] - 32L*D[2][2] + 20L*D[2][3] + 40L*D[2][4] - 4L*D[2][5] - 8L*D[2][6] - 68L*D[3][1] - 136L*D[3][2] + 85L*D[3][3] + 170L*D[3][4] - 17L*D[3][5] - 34L*D[3][6] + 68L*D[4][1] + 136L*D[4][2] - 85L*D[4][3] - 170L*D[4][4] + 17L*D[4][5] + 34L*D[4][6] + 16L*D[5][1] + 32L*D[5][2] - 20L*D[5][3] - 40L*D[5][4] + 4L*D[5][5] + 8L*D[5][6] - 16L*D[6][1] - 32L*D[6][2] + 20L*D[6][3] + 40L*D[6][4] - 4L*D[6][5] - 8L*D[6][6] ;
M[2][6] = 16L*D[1][1] - 32L*D[1][2] - 20L*D[1][3] + 40L*D[1][4] + 4L*D[1][5] - 8L*D[1][6] - 16L*D[2][1] + 32L*D[2][2] + 20L*D[2][3] - 40L*D[2][4] - 4L*D[2][5] + 8L*D[2][6] - 68L*D[3][1] + 136L*D[3][2] + 85L*D[3][3] - 170L*D[3][4] - 17L*D[3][5] + 34L*D[3][6] + 68L*D[4][1] - 136L*D[4][2] - 85L*D[4][3] + 170L*D[4][4] + 17L*D[4][5] - 34L*D[4][6] + 16L*D[5][1] - 32L*D[5][2] - 20L*D[5][3] + 40L*D[5][4] + 4L*D[5][5] - 8L*D[5][6] - 16L*D[6][1] + 32L*D[6][2] + 20L*D[6][3] - 40L*D[6][4] - 4L*D[6][5] + 8L*D[6][6] ;
M[2][7] = 16L*D[1][1] - 84L*D[1][3] + 84L*D[1][5] - 16L*D[1][7] - 16L*D[2][1] + 84L*D[2][3] - 84L*D[2][5] + 16L*D[2][7] - 68L*D[3][1] + 357L*D[3][3] - 357L*D[3][5] + 68L*D[3][7] + 68L*D[4][1] - 357L*D[4][3] + 357L*D[4][5] - 68L*D[4][7] + 16L*D[5][1] - 84L*D[5][3] + 84L*D[5][5] - 16L*D[5][7] - 16L*D[6][1] + 84L*D[6][3] - 84L*D[6][5] + 16L*D[6][7] ;
M[3][0] = 8L*D[1][0] - 42L*D[1][2] + 42L*D[1][4] - 8L*D[1][6] + 4L*D[2][0] - 21L*D[2][2] + 21L*D[2][4] - 4L*D[2][6] - 40L*D[3][0] + 210L*D[3][2] - 210L*D[3][4] + 40L*D[3][6] - 20L*D[4][0] + 105L*D[4][2] - 105L*D[4][4] + 20L*D[4][6] + 32L*D[5][0] - 168L*D[5][2] + 168L*D[5][4] - 32L*D[5][6] + 16L*D[6][0] - 84L*D[6][2] + 84L*D[6][4] - 16L*D[6][6] ;
M[3][1] = 8L*D[1][1] + 8L*D[1][2] - 34L*D[1][3] - 34L*D[1][4] + 8L*D[1][5] + 8L*D[1][6] + 4L*D[2][1] + 4L*D[2][2] - 17L*D[2][3] - 17L*D[2][4] + 4L*D[2][5] + 4L*D[2][6] - 40L*D[3][1] - 40L*D[3][2] + 170L*D[3][3] + 170L*D[3][4] - 40L*D[3][5] - 40L*D[3][6] - 20L*D[4][1] - 20L*D[4][2] + 85L*D[4][3] + 85L*D[4][4] - 20L*D[4][5] - 20L*D[4][6] + 32L*D[5][1] + 32L*D[5][2] - 136L*D[5][3] - 136L*D[5][4] + 32L*D[5][5] + 32L*D[5][6] + 16L*D[6][1] + 16L*D[6][2] - 68L*D[6][3] - 68L*D[6][4] + 16L*D[6][5] + 16L*D[6][6] ;
M[3][2] = 8L*D[1][1] - 8L*D[1][2] - 34L*D[1][3] + 34L*D[1][4] + 8L*D[1][5] - 8L*D[1][6] + 4L*D[2][1] - 4L*D[2][2] - 17L*D[2][3] + 17L*D[2][4] + 4L*D[2][5] - 4L*D[2][6] - 40L*D[3][1] + 40L*D[3][2] + 170L*D[3][3] - 170L*D[3][4] - 40L*D[3][5] + 40L*D[3][6] - 20L*D[4][1] + 20L*D[4][2] + 85L*D[4][3] - 85L*D[4][4] - 20L*D[4][5] + 20L*D[4][6] + 32L*D[5][1] - 32L*D[5][2] - 136L*D[5][3] + 136L*D[5][4] + 32L*D[5][5] - 32L*D[5][6] + 16L*D[6][1] - 16L*D[6][2] - 68L*D[6][3] + 68L*D[6][4] + 16L*D[6][5] - 16L*D[6][6] ;
M[3][3] = 4L*D[1][1] + 2L*D[1][2] - 20L*D[1][3] - 10L*D[1][4] + 16L*D[1][5] + 8L*D[1][6] + 2L*D[2][1] + D[2][2] - 10L*D[2][3] - 5L*D[2][4] + 8L*D[2][5] + 4L*D[2][6] - 20L*D[3][1] - 10L*D[3][2] + 100L*D[3][3] + 50L*D[3][4] - 80L*D[3][5] - 40L*D[3][6] - 10L*D[4][1] - 5L*D[4][2] + 50L*D[4][3] + 25L*D[4][4] - 40L*D[4][5] - 20L*D[4][6] + 16L*D[5][1] + 8L*D[5][2] - 80L*D[5][3] - 40L*D[5][4] + 64L*D[5][5] + 32L*D[5][6] + 8L*D[6][1] + 4L*D[6][2] - 40L*D[6][3] - 20L*D[6][4] + 32L*D[6][5] + 16L*D[6][6] ;
M[3][4] = 4L*D[1][1] - 2L*D[1][2] - 20L*D[1][3] + 10L*D[1][4] + 16L*D[1][5] - 8L*D[1][6] + 2L*D[2][1] - D[2][2] - 10L*D[2][3] + 5L*D[2][4] + 8L*D[2][5] - 4L*D[2][6] - 20L*D[3][1] + 10L*D[3][2] + 100L*D[3][3] - 50L*D[3][4] - 80L*D[3][5] + 40L*D[3][6] - 10L*D[4][1] + 5L*D[4][2] + 50L*D[4][3] - 25L*D[4][4] - 40L*D[4][5] + 20L*D[4][6] + 16L*D[5][1] - 8L*D[5][2] - 80L*D[5][3] + 40L*D[5][4] + 64L*D[5][5] - 32L*D[5][6] + 8L*D[6][1] - 4L*D[6][2] - 40L*D[6][3] + 20L*D[6][4] + 32L*D[6][5] - 16L*D[6][6] ;
M[3][5] = 8L*D[1][1] + 16L*D[1][2] - 10L*D[1][3] - 20L*D[1][4] + 2L*D[1][5] + 4L*D[1][6] + 4L*D[2][1] + 8L*D[2][2] - 5L*D[2][3] - 10L*D[2][4] + D[2][5] + 2L*D[2][6] - 40L*D[3][1] - 80L*D[3][2] + 50L*D[3][3] + 100L*D[3][4] - 10L*D[3][5] - 20L*D[3][6] - 20L*D[4][1] - 40L*D[4][2] + 25L*D[4][3] + 50L*D[4][4] - 5L*D[4][5] - 10L*D[4][6] + 32L*D[5][1] + 64L*D[5][2] - 40L*D[5][3] - 80L*D[5][4] + 8L*D[5][5] + 16L*D[5][6] + 16L*D[6][1] + 32L*D[6][2] - 20L*D[6][3] - 40L*D[6][4] + 4L*D[6][5] + 8L*D[6][6] ;
M[3][6] = 8L*D[1][1] - 16L*D[1][2] - 10L*D[1][3] + 20L*D[1][4] + 2L*D[1][5] - 4L*D[1][6] + 4L*D[2][1] - 8L*D[2][2] - 5L*D[2][3] + 10L*D[2][4] + D[2][5] - 2L*D[2][6] - 40L*D[3][1] + 80L*D[3][2] + 50L*D[3][3] - 100L*D[3][4] - 10L*D[3][5] + 20L*D[3][6] - 20L*D[4][1] + 40L*D[4][2] + 25L*D[4][3] - 50L*D[4][4] - 5L*D[4][5] + 10L*D[4][6] + 32L*D[5][1] - 64L*D[5][2] - 40L*D[5][3] + 80L*D[5][4] + 8L*D[5][5] - 16L*D[5][6] + 16L*D[6][1] - 32L*D[6][2] - 20L*D[6][3] + 40L*D[6][4] + 4L*D[6][5] - 8L*D[6][6] ;
M[3][7] = 8L*D[1][1] - 42L*D[1][3] + 42L*D[1][5] - 8L*D[1][7] + 4L*D[2][1] - 21L*D[2][3] + 21L*D[2][5] - 4L*D[2][7] - 40L*D[3][1] + 210L*D[3][3] - 210L*D[3][5] + 40L*D[3][7] - 20L*D[4][1] + 105L*D[4][3] - 105L*D[4][5] + 20L*D[4][7] + 32L*D[5][1] - 168L*D[5][3] + 168L*D[5][5] - 32L*D[5][7] + 16L*D[6][1] - 84L*D[6][3] + 84L*D[6][5] - 16L*D[6][7] ;
M[4][0] = 8L*D[1][0] - 42L*D[1][2] + 42L*D[1][4] - 8L*D[1][6] - 4L*D[2][0] + 21L*D[2][2] - 21L*D[2][4] + 4L*D[2][6] - 40L*D[3][0] + 210L*D[3][2] - 210L*D[3][4] + 40L*D[3][6] + 20L*D[4][0] - 105L*D[4][2] + 105L*D[4][4] - 20L*D[4][6] + 32L*D[5][0] - 168L*D[5][2] + 168L*D[5][4] - 32L*D[5][6] - 16L*D[6][0] + 84L*D[6][2] - 84L*D[6][4] + 16L*D[6][6] ;
M[4][1] = 8L*D[1][1] + 8L*D[1][2] - 34L*D[1][3] - 34L*D[1][4] + 8L*D[1][5] + 8L*D[1][6] - 4L*D[2][1] - 4L*D[2][2] + 17L*D[2][3] + 17L*D[2][4] - 4L*D[2][5] - 4L*D[2][6] - 40L*D[3][1] - 40L*D[3][2] + 170L*D[3][3] + 170L*D[3][4] - 40L*D[3][5] - 40L*D[3][6] + 20L*D[4][1] + 20L*D[4][2] - 85L*D[4][3] - 85L*D[4][4] + 20L*D[4][5] + 20L*D[4][6] + 32L*D[5][1] + 32L*D[5][2] - 136L*D[5][3] - 136L*D[5][4] + 32L*D[5][5] + 32L*D[5][6] - 16L*D[6][1] - 16L*D[6][2] + 68L*D[6][3] + 68L*D[6][4] - 16L*D[6][5] - 16L*D[6][6] ;
M[4][2] = 8L*D[1][1] - 8L*D[1][2] - 34L*D[1][3] + 34L*D[1][4] + 8L*D[1][5] - 8L*D[1][6] - 4L*D[2][1] + 4L*D[2][2] + 17L*D[2][3] - 17L*D[2][4] - 4L*D[2][5] + 4L*D[2][6] - 40L*D[3][1] + 40L*D[3][2] + 170L*D[3][3] - 170L*D[3][4] - 40L*D[3][5] + 40L*D[3][6] + 20L*D[4][1] - 20L*D[4][2] - 85L*D[4][3] + 85L*D[4][4] + 20L*D[4][5] - 20L*D[4][6] + 32L*D[5][1] - 32L*D[5][2] - 136L*D[5][3] + 136L*D[5][4] + 32L*D[5][5] - 32L*D[5][6] - 16L*D[6][1] + 16L*D[6][2] + 68L*D[6][3] - 68L*D[6][4] - 16L*D[6][5] + 16L*D[6][6] ;
M[4][3] = 4L*D[1][1] + 2L*D[1][2] - 20L*D[1][3] - 10L*D[1][4] + 16L*D[1][5] + 8L*D[1][6] - 2L*D[2][1] - D[2][2] + 10L*D[2][3] + 5L*D[2][4] - 8L*D[2][5] - 4L*D[2][6] - 20L*D[3][1] - 10L*D[3][2] + 100L*D[3][3] + 50L*D[3][4] - 80L*D[3][5] - 40L*D[3][6] + 10L*D[4][1] + 5L*D[4][2] - 50L*D[4][3] - 25L*D[4][4] + 40L*D[4][5] + 20L*D[4][6] + 16L*D[5][1] + 8L*D[5][2] - 80L*D[5][3] - 40L*D[5][4] + 64L*D[5][5] + 32L*D[5][6] - 8L*D[6][1] - 4L*D[6][2] + 40L*D[6][3] + 20L*D[6][4] - 32L*D[6][5] - 16L*D[6][6] ;
M[4][4] = 4L*D[1][1] - 2L*D[1][2] - 20L*D[1][3] + 10L*D[1][4] + 16L*D[1][5] - 8L*D[1][6] - 2L*D[2][1] + D[2][2] + 10L*D[2][3] - 5L*D[2][4] - 8L*D[2][5] + 4L*D[2][6] - 20L*D[3][1] + 10L*D[3][2] + 100L*D[3][3] - 50L*D[3][4] - 80L*D[3][5] + 40L*D[3][6] + 10L*D[4][1] - 5L*D[4][2] - 50L*D[4][3] + 25L*D[4][4] + 40L*D[4][5] - 20L*D[4][6] + 16L*D[5][1] - 8L*D[5][2] - 80L*D[5][3] + 40L*D[5][4] + 64L*D[5][5] - 32L*D[5][6] - 8L*D[6][1] + 4L*D[6][2] + 40L*D[6][3] - 20L*D[6][4] - 32L*D[6][5] + 16L*D[6][6] ;
M[4][5] = 8L*D[1][1] + 16L*D[1][2] - 10L*D[1][3] - 20L*D[1][4] + 2L*D[1][5] + 4L*D[1][6] - 4L*D[2][1] - 8L*D[2][2] + 5L*D[2][3] + 10L*D[2][4] - D[2][5] - 2L*D[2][6] - 40L*D[3][1] - 80L*D[3][2] + 50L*D[3][3] + 100L*D[3][4] - 10L*D[3][5] - 20L*D[3][6] + 20L*D[4][1] + 40L*D[4][2] - 25L*D[4][3] - 50L*D[4][4] + 5L*D[4][5] + 10L*D[4][6] + 32L*D[5][1] + 64L*D[5][2] - 40L*D[5][3] - 80L*D[5][4] + 8L*D[5][5] + 16L*D[5][6] - 16L*D[6][1] - 32L*D[6][2] + 20L*D[6][3] + 40L*D[6][4] - 4L*D[6][5] - 8L*D[6][6] ;
M[4][6] = 8L*D[1][1] - 16L*D[1][2] - 10L*D[1][3] + 20L*D[1][4] + 2L*D[1][5] - 4L*D[1][6] - 4L*D[2][1] + 8L*D[2][2] + 5L*D[2][3] - 10L*D[2][4] - D[2][5] + 2L*D[2][6] - 40L*D[3][1] + 80L*D[3][2] + 50L*D[3][3] - 100L*D[3][4] - 10L*D[3][5] + 20L*D[3][6] + 20L*D[4][1] - 40L*D[4][2] - 25L*D[4][3] + 50L*D[4][4] + 5L*D[4][5] - 10L*D[4][6] + 32L*D[5][1] - 64L*D[5][2] - 40L*D[5][3] + 80L*D[5][4] + 8L*D[5][5] - 16L*D[5][6] - 16L*D[6][1] + 32L*D[6][2] + 20L*D[6][3] - 40L*D[6][4] - 4L*D[6][5] + 8L*D[6][6] ;
M[4][7] = 8L*D[1][1] - 42L*D[1][3] + 42L*D[1][5] - 8L*D[1][7] - 4L*D[2][1] + 21L*D[2][3] - 21L*D[2][5] + 4L*D[2][7] - 40L*D[3][1] + 210L*D[3][3] - 210L*D[3][5] + 40L*D[3][7] + 20L*D[4][1] - 105L*D[4][3] + 105L*D[4][5] - 20L*D[4][7] + 32L*D[5][1] - 168L*D[5][3] + 168L*D[5][5] - 32L*D[5][7] - 16L*D[6][1] + 84L*D[6][3] - 84L*D[6][5] + 16L*D[6][7] ;
M[5][0] = 16L*D[1][0] - 84L*D[1][2] + 84L*D[1][4] - 16L*D[1][6] + 32L*D[2][0] - 168L*D[2][2] + 168L*D[2][4] - 32L*D[2][6] - 20L*D[3][0] + 105L*D[3][2] - 105L*D[3][4] + 20L*D[3][6] - 40L*D[4][0] + 210L*D[4][2] - 210L*D[4][4] + 40L*D[4][6] + 4L*D[5][0] - 21L*D[5][2] + 21L*D[5][4] - 4L*D[5][6] + 8L*D[6][0] - 42L*D[6][2] + 42L*D[6][4] - 8L*D[6][6] ;
M[5][1] = 16L*D[1][1] + 16L*D[1][2] - 68L*D[1][3] - 68L*D[1][4] + 16L*D[1][5] + 16L*D[1][6] + 32L*D[2][1] + 32L*D[2][2] - 136L*D[2][3] - 136L*D[2][4] + 32L*D[2][5] + 32L*D[2][6] - 20L*D[3][1] - 20L*D[3][2] + 85L*D[3][3] + 85L*D[3][4] - 20L*D[3][5] - 20L*D[3][6] - 40L*D[4][1] - 40L*D[4][2] + 170L*D[4][3] + 170L*D[4][4] - 40L*D[4][5] - 40L*D[4][6] + 4L*D[5][1] + 4L*D[5][2] - 17L*D[5][3] - 17L*D[5][4] + 4L*D[5][5] + 4L*D[5][6] + 8L*D[6][1] + 8L*D[6][2] - 34L*D[6][3] - 34L*D[6][4] + 8L*D[6][5] + 8L*D[6][6] ;
M[5][2] = 16L*D[1][1] - 16L*D[1][2] - 68L*D[1][3] + 68L*D[1][4] + 16L*D[1][5] - 16L*D[1][6] + 32L*D[2][1] - 32L*D[2][2] - 136L*D[2][3] + 136L*D[2][4] + 32L*D[2][5] - 32L*D[2][6] - 20L*D[3][1] + 20L*D[3][2] + 85L*D[3][3] - 85L*D[3][4] - 20L*D[3][5] + 20L*D[3][6] - 40L*D[4][1] + 40L*D[4][2] + 170L*D[4][3] - 170L*D[4][4] - 40L*D[4][5] + 40L*D[4][6] + 4L*D[5][1] - 4L*D[5][2] - 17L*D[5][3] + 17L*D[5][4] + 4L*D[5][5] - 4L*D[5][6] + 8L*D[6][1] - 8L*D[6][2] - 34L*D[6][3] + 34L*D[6][4] + 8L*D[6][5] - 8L*D[6][6] ;
M[5][3] = 8L*D[1][1] + 4L*D[1][2] - 40L*D[1][3] - 20L*D[1][4] + 32L*D[1][5] + 16L*D[1][6] + 16L*D[2][1] + 8L*D[2][2] - 80L*D[2][3] - 40L*D[2][4] + 64L*D[2][5] + 32L*D[2][6] - 10L*D[3][1] - 5L*D[3][2] + 50L*D[3][3] + 25L*D[3][4] - 40L*D[3][5] - 20L*D[3][6] - 20L*D[4][1] - 10L*D[4][2] + 100L*D[4][3] + 50L*D[4][4] - 80L*D[4][5] - 40L*D[4][6] + 2L*D[5][1] + D[5][2] - 10L*D[5][3] - 5L*D[5][4] + 8L*D[5][5] + 4L*D[5][6] + 4L*D[6][1] + 2L*D[6][2] - 20L*D[6][3] - 10L*D[6][4] + 16L*D[6][5] + 8L*D[6][6] ;
M[5][4] = 8L*D[1][1] - 4L*D[1][2] - 40L*D[1][3] + 20L*D[1][4] + 32L*D[1][5] - 16L*D[1][6] + 16L*D[2][1] - 8L*D[2][2] - 80L*D[2][3] + 40L*D[2][4] + 64L*D[2][5] - 32L*D[2][6] - 10L*D[3][1] + 5L*D[3][2] + 50L*D[3][3] - 25L*D[3][4] - 40L*D[3][5] + 20L*D[3][6] - 20L*D[4][1] + 10L*D[4][2] + 100L*D[4][3] - 50L*D[4][4] - 80L*D[4][5] + 40L*D[4][6] + 2L*D[5][1] - D[5][2] - 10L*D[5][3] + 5L*D[5][4] + 8L*D[5][5] - 4L*D[5][6] + 4L*D[6][1] - 2L*D[6][2] - 20L*D[6][3] + 10L*D[6][4] + 16L*D[6][5] - 8L*D[6][6] ;
M[5][5] = 16L*D[1][1] + 32L*D[1][2] - 20L*D[1][3] - 40L*D[1][4] + 4L*D[1][5] + 8L*D[1][6] + 32L*D[2][1] + 64L*D[2][2] - 40L*D[2][3] - 80L*D[2][4] + 8L*D[2][5] + 16L*D[2][6] - 20L*D[3][1] - 40L*D[3][2] + 25L*D[3][3] + 50L*D[3][4] - 5L*D[3][5] - 10L*D[3][6] - 40L*D[4][1] - 80L*D[4][2] + 50L*D[4][3] + 100L*D[4][4] - 10L*D[4][5] - 20L*D[4][6] + 4L*D[5][1] + 8L*D[5][2] - 5L*D[5][3] - 10L*D[5][4] + D[5][5] + 2L*D[5][6] + 8L*D[6][1] + 16L*D[6][2] - 10L*D[6][3] - 20L*D[6][4] + 2L*D[6][5] + 4L*D[6][6] ;
M[5][6] = 16L*D[1][1] - 32L*D[1][2] - 20L*D[1][3] + 40L*D[1][4] + 4L*D[1][5] - 8L*D[1][6] + 32L*D[2][1] - 64L*D[2][2] - 40L*D[2][3] + 80L*D[2][4] + 8L*D[2][5] - 16L*D[2][6] - 20L*D[3][1] + 40L*D[3][2] + 25L*D[3][3] - 50L*D[3][4] - 5L*D[3][5] + 10L*D[3][6] - 40L*D[4][1] + 80L*D[4][2] + 50L*D[4][3] - 100L*D[4][4] - 10L*D[4][5] + 20L*D[4][6] + 4L*D[5][1] - 8L*D[5][2] - 5L*D[5][3] + 10L*D[5][4] + D[5][5] - 2L*D[5][6] + 8L*D[6][1] - 16L*D[6][2] - 10L*D[6][3] + 20L*D[6][4] + 2L*D[6][5] - 4L*D[6][6] ;
M[5][7] = 16L*D[1][1] - 84L*D[1][3] + 84L*D[1][5] - 16L*D[1][7] + 32L*D[2][1] - 168L*D[2][3] + 168L*D[2][5] - 32L*D[2][7] - 20L*D[3][1] + 105L*D[3][3] - 105L*D[3][5] + 20L*D[3][7] - 40L*D[4][1] + 210L*D[4][3] - 210L*D[4][5] + 40L*D[4][7] + 4L*D[5][1] - 21L*D[5][3] + 21L*D[5][5] - 4L*D[5][7] + 8L*D[6][1] - 42L*D[6][3] + 42L*D[6][5] - 8L*D[6][7] ;
M[6][0] = 16L*D[1][0] - 84L*D[1][2] + 84L*D[1][4] - 16L*D[1][6] - 32L*D[2][0] + 168L*D[2][2] - 168L*D[2][4] + 32L*D[2][6] - 20L*D[3][0] + 105L*D[3][2] - 105L*D[3][4] + 20L*D[3][6] + 40L*D[4][0] - 210L*D[4][2] + 210L*D[4][4] - 40L*D[4][6] + 4L*D[5][0] - 21L*D[5][2] + 21L*D[5][4] - 4L*D[5][6] - 8L*D[6][0] + 42L*D[6][2] - 42L*D[6][4] + 8L*D[6][6] ;
M[6][1] = 16L*D[1][1] + 16L*D[1][2] - 68L*D[1][3] - 68L*D[1][4] + 16L*D[1][5] + 16L*D[1][6] - 32L*D[2][1] - 32L*D[2][2] + 136L*D[2][3] + 136L*D[2][4] - 32L*D[2][5] - 32L*D[2][6] - 20L*D[3][1] - 20L*D[3][2] + 85L*D[3][3] + 85L*D[3][4] - 20L*D[3][5] - 20L*D[3][6] + 40L*D[4][1] + 40L*D[4][2] - 170L*D[4][3] - 170L*D[4][4] + 40L*D[4][5] + 40L*D[4][6] + 4L*D[5][1] + 4L*D[5][2] - 17L*D[5][3] - 17L*D[5][4] + 4L*D[5][5] + 4L*D[5][6] - 8L*D[6][1] - 8L*D[6][2] + 34L*D[6][3] + 34L*D[6][4] - 8L*D[6][5] - 8L*D[6][6] ;
M[6][2] = 16L*D[1][1] - 16L*D[1][2] - 68L*D[1][3] + 68L*D[1][4] + 16L*D[1][5] - 16L*D[1][6] - 32L*D[2][1] + 32L*D[2][2] + 136L*D[2][3] - 136L*D[2][4] - 32L*D[2][5] + 32L*D[2][6] - 20L*D[3][1] + 20L*D[3][2] + 85L*D[3][3] - 85L*D[3][4] - 20L*D[3][5] + 20L*D[3][6] + 40L*D[4][1] - 40L*D[4][2] - 170L*D[4][3] + 170L*D[4][4] + 40L*D[4][5] - 40L*D[4][6] + 4L*D[5][1] - 4L*D[5][2] - 17L*D[5][3] + 17L*D[5][4] + 4L*D[5][5] - 4L*D[5][6] - 8L*D[6][1] + 8L*D[6][2] + 34L*D[6][3] - 34L*D[6][4] - 8L*D[6][5] + 8L*D[6][6] ;
M[6][3] = 8L*D[1][1] + 4L*D[1][2] - 40L*D[1][3] - 20L*D[1][4] + 32L*D[1][5] + 16L*D[1][6] - 16L*D[2][1] - 8L*D[2][2] + 80L*D[2][3] + 40L*D[2][4] - 64L*D[2][5] - 32L*D[2][6] - 10L*D[3][1] - 5L*D[3][2] + 50L*D[3][3] + 25L*D[3][4] - 40L*D[3][5] - 20L*D[3][6] + 20L*D[4][1] + 10L*D[4][2] - 100L*D[4][3] - 50L*D[4][4] + 80L*D[4][5] + 40L*D[4][6] + 2L*D[5][1] + D[5][2] - 10L*D[5][3] - 5L*D[5][4] + 8L*D[5][5] + 4L*D[5][6] - 4L*D[6][1] - 2L*D[6][2] + 20L*D[6][3] + 10L*D[6][4] - 16L*D[6][5] - 8L*D[6][6] ;
M[6][4] = 8L*D[1][1] - 4L*D[1][2] - 40L*D[1][3] + 20L*D[1][4] + 32L*D[1][5] - 16L*D[1][6] - 16L*D[2][1] + 8L*D[2][2] + 80L*D[2][3] - 40L*D[2][4] - 64L*D[2][5] + 32L*D[2][6] - 10L*D[3][1] + 5L*D[3][2] + 50L*D[3][3] - 25L*D[3][4] - 40L*D[3][5] + 20L*D[3][6] + 20L*D[4][1] - 10L*D[4][2] - 100L*D[4][3] + 50L*D[4][4] + 80L*D[4][5] - 40L*D[4][6] + 2L*D[5][1] - D[5][2] - 10L*D[5][3] + 5L*D[5][4] + 8L*D[5][5] - 4L*D[5][6] - 4L*D[6][1] + 2L*D[6][2] + 20L*D[6][3] - 10L*D[6][4] - 16L*D[6][5] + 8L*D[6][6] ;
M[6][5] = 16L*D[1][1] + 32L*D[1][2] - 20L*D[1][3] - 40L*D[1][4] + 4L*D[1][5] + 8L*D[1][6] - 32L*D[2][1] - 64L*D[2][2] + 40L*D[2][3] + 80L*D[2][4] - 8L*D[2][5] - 16L*D[2][6] - 20L*D[3][1] - 40L*D[3][2] + 25L*D[3][3] + 50L*D[3][4] - 5L*D[3][5] - 10L*D[3][6] + 40L*D[4][1] + 80L*D[4][2] - 50L*D[4][3] - 100L*D[4][4] + 10L*D[4][5] + 20L*D[4][6] + 4L*D[5][1] + 8L*D[5][2] - 5L*D[5][3] - 10L*D[5][4] + D[5][5] + 2L*D[5][6] - 8L*D[6][1] - 16L*D[6][2] + 10L*D[6][3] + 20L*D[6][4] - 2L*D[6][5] - 4L*D[6][6] ;
M[6][6] = 16L*D[1][1] - 32L*D[1][2] - 20L*D[1][3] + 40L*D[1][4] + 4L*D[1][5] - 8L*D[1][6] - 32L*D[2][1] + 64L*D[2][2] + 40L*D[2][3] - 80L*D[2][4] - 8L*D[2][5] + 16L*D[2][6] - 20L*D[3][1] + 40L*D[3][2] + 25L*D[3][3] - 50L*D[3][4] - 5L*D[3][5] + 10L*D[3][6] + 40L*D[4][1] - 80L*D[4][2] - 50L*D[4][3] + 100L*D[4][4] + 10L*D[4][5] - 20L*D[4][6] + 4L*D[5][1] - 8L*D[5][2] - 5L*D[5][3] + 10L*D[5][4] + D[5][5] - 2L*D[5][6] - 8L*D[6][1] + 16L*D[6][2] + 10L*D[6][3] - 20L*D[6][4] - 2L*D[6][5] + 4L*D[6][6] ;
M[6][7] = 16L*D[1][1] - 84L*D[1][3] + 84L*D[1][5] - 16L*D[1][7] - 32L*D[2][1] + 168L*D[2][3] - 168L*D[2][5] + 32L*D[2][7] - 20L*D[3][1] + 105L*D[3][3] - 105L*D[3][5] + 20L*D[3][7] + 40L*D[4][1] - 210L*D[4][3] + 210L*D[4][5] - 40L*D[4][7] + 4L*D[5][1] - 21L*D[5][3] + 21L*D[5][5] - 4L*D[5][7] - 8L*D[6][1] + 42L*D[6][3] - 42L*D[6][5] + 8L*D[6][7] ;
M[7][0] = -16L*D[1][0] + 84L*D[1][2] - 84L*D[1][4] + 16L*D[1][6] + 84L*D[3][0] - 441L*D[3][2] + 441L*D[3][4] - 84L*D[3][6] - 84L*D[5][0] + 441L*D[5][2] - 441L*D[5][4] + 84L*D[5][6] + 16L*D[7][0] - 84L*D[7][2] + 84L*D[7][4] - 16L*D[7][6] ;
M[7][1] = 16L*D[1][1] + 16L*D[1][2] - 68L*D[1][3] - 68L*D[1][4] + 16L*D[1][5] + 16L*D[1][6] - 84L*D[3][1] - 84L*D[3][2] + 357L*D[3][3] + 357L*D[3][4] - 84L*D[3][5] - 84L*D[3][6] + 84L*D[5][1] + 84L*D[5][2] - 357L*D[5][3] - 357L*D[5][4] + 84L*D[5][5] + 84L*D[5][6] - 16L*D[7][1] - 16L*D[7][2] + 68L*D[7][3] + 68L*D[7][4] - 16L*D[7][5] - 16L*D[7][6] ;
M[7][2] = 16L*D[1][1] - 16L*D[1][2] - 68L*D[1][3] + 68L*D[1][4] + 16L*D[1][5] - 16L*D[1][6] - 84L*D[3][1] + 84L*D[3][2] + 357L*D[3][3] - 357L*D[3][4] - 84L*D[3][5] + 84L*D[3][6] + 84L*D[5][1] - 84L*D[5][2] - 357L*D[5][3] + 357L*D[5][4] + 84L*D[5][5] - 84L*D[5][6] - 16L*D[7][1] + 16L*D[7][2] + 68L*D[7][3] - 68L*D[7][4] - 16L*D[7][5] + 16L*D[7][6] ;
M[7][3] = 8L*D[1][1] + 4L*D[1][2] - 40L*D[1][3] - 20L*D[1][4] + 32L*D[1][5] + 16L*D[1][6] - 42L*D[3][1] - 21L*D[3][2] + 210L*D[3][3] + 105L*D[3][4] - 168L*D[3][5] - 84L*D[3][6] + 42L*D[5][1] + 21L*D[5][2] - 210L*D[5][3] - 105L*D[5][4] + 168L*D[5][5] + 84L*D[5][6] - 8L*D[7][1] - 4L*D[7][2] + 40L*D[7][3] + 20L*D[7][4] - 32L*D[7][5] - 16L*D[7][6] ;
M[7][4] = 8L*D[1][1] - 4L*D[1][2] - 40L*D[1][3] + 20L*D[1][4] + 32L*D[1][5] - 16L*D[1][6] - 42L*D[3][1] + 21L*D[3][2] + 210L*D[3][3] - 105L*D[3][4] - 168L*D[3][5] + 84L*D[3][6] + 42L*D[5][1] - 21L*D[5][2] - 210L*D[5][3] + 105L*D[5][4] + 168L*D[5][5] - 84L*D[5][6] - 8L*D[7][1] + 4L*D[7][2] + 40L*D[7][3] - 20L*D[7][4] - 32L*D[7][5] + 16L*D[7][6] ;
M[7][5] = 16L*D[1][1] + 32L*D[1][2] - 20L*D[1][3] - 40L*D[1][4] + 4L*D[1][5] + 8L*D[1][6] - 84L*D[3][1] - 168L*D[3][2] + 105L*D[3][3] + 210L*D[3][4] - 21L*D[3][5] - 42L*D[3][6] + 84L*D[5][1] + 168L*D[5][2] - 105L*D[5][3] - 210L*D[5][4] + 21L*D[5][5] + 42L*D[5][6] - 16L*D[7][1] - 32L*D[7][2] + 20L*D[7][3] + 40L*D[7][4] - 4L*D[7][5] - 8L*D[7][6] ;
M[7][6] = 16L*D[1][1] - 32L*D[1][2] - 20L*D[1][3] + 40L*D[1][4] + 4L*D[1][5] - 8L*D[1][6] - 84L*D[3][1] + 168L*D[3][2] + 105L*D[3][3] - 210L*D[3][4] - 21L*D[3][5] + 42L*D[3][6] + 84L*D[5][1] - 168L*D[5][2] - 105L*D[5][3] + 210L*D[5][4] + 21L*D[5][5] - 42L*D[5][6] - 16L*D[7][1] + 32L*D[7][2] + 20L*D[7][3] - 40L*D[7][4] - 4L*D[7][5] + 8L*D[7][6] ;
M[7][7] = 16L*D[1][1] - 84L*D[1][3] + 84L*D[1][5] - 16L*D[1][7] - 84L*D[3][1] + 441L*D[3][3] - 441L*D[3][5] + 84L*D[3][7] + 84L*D[5][1] - 441L*D[5][3] + 441L*D[5][5] - 84L*D[5][7] - 16L*D[7][1] + 84L*D[7][3] - 84L*D[7][5] + 16L*D[7][7] ;

}


def void WinogradM4R5OutputTransform(int64_al[8][8] M, int64_al[4][4] C) {

C[0][0] = M[0][0] + M[0][1] + M[0][2] + M[0][3] + M[0][4] + M[0][5] + M[0][6] + M[1][0] + M[1][1] + M[1][2] + M[1][3] + M[1][4] + M[1][5] + M[1][6] + M[2][0] + M[2][1] + M[2][2] + M[2][3] + M[2][4] + M[2][5] + M[2][6] + M[3][0] + M[3][1] + M[3][2] + M[3][3] + M[3][4] + M[3][5] + M[3][6] + M[4][0] + M[4][1] + M[4][2] + M[4][3] + M[4][4] + M[4][5] + M[4][6] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] + M[5][5] + M[5][6] + M[6][0] + M[6][1] + M[6][2] + M[6][3] + M[6][4] + M[6][5] + M[6][6] ;
C[0][1] = (2L*M[0][1] - 2L*M[0][2] + 4L*M[0][3] - 4L*M[0][4] + M[0][5] - M[0][6] + 2L*M[1][1] - 2L*M[1][2] + 4L*M[1][3] - 4L*M[1][4] + M[1][5] - M[1][6] + 2L*M[2][1] - 2L*M[2][2] + 4L*M[2][3] - 4L*M[2][4] + M[2][5] - M[2][6] + 2L*M[3][1] - 2L*M[3][2] + 4L*M[3][3] - 4L*M[3][4] + M[3][5] - M[3][6] + 2L*M[4][1] - 2L*M[4][2] + 4L*M[4][3] - 4L*M[4][4] + M[4][5] - M[4][6] + 2L*M[5][1] - 2L*M[5][2] + 4L*M[5][3] - 4L*M[5][4] + M[5][5] - M[5][6] + 2L*M[6][1] - 2L*M[6][2] + 4L*M[6][3] - 4L*M[6][4] + M[6][5] - M[6][6])/2L ;
C[0][2] = (4L*M[0][1] + 4L*M[0][2] + 16L*M[0][3] + 16L*M[0][4] + M[0][5] + M[0][6] + 4L*M[1][1] + 4L*M[1][2] + 16L*M[1][3] + 16L*M[1][4] + M[1][5] + M[1][6] + 4L*M[2][1] + 4L*M[2][2] + 16L*M[2][3] + 16L*M[2][4] + M[2][5] + M[2][6] + 4L*M[3][1] + 4L*M[3][2] + 16L*M[3][3] + 16L*M[3][4] + M[3][5] + M[3][6] + 4L*M[4][1] + 4L*M[4][2] + 16L*M[4][3] + 16L*M[4][4] + M[4][5] + M[4][6] + 4L*M[5][1] + 4L*M[5][2] + 16L*M[5][3] + 16L*M[5][4] + M[5][5] + M[5][6] + 4L*M[6][1] + 4L*M[6][2] + 16L*M[6][3] + 16L*M[6][4] + M[6][5] + M[6][6])/4L ;
C[0][3] = (8L*M[0][1] - 8L*M[0][2] + 64L*M[0][3] - 64L*M[0][4] + M[0][5] - M[0][6] + 8L*M[0][7] + 8L*M[1][1] - 8L*M[1][2] + 64L*M[1][3] - 64L*M[1][4] + M[1][5] - M[1][6] + 8L*M[1][7] + 8L*M[2][1] - 8L*M[2][2] + 64L*M[2][3] - 64L*M[2][4] + M[2][5] - M[2][6] + 8L*M[2][7] + 8L*M[3][1] - 8L*M[3][2] + 64L*M[3][3] - 64L*M[3][4] + M[3][5] - M[3][6] + 8L*M[3][7] + 8L*M[4][1] - 8L*M[4][2] + 64L*M[4][3] - 64L*M[4][4] + M[4][5] - M[4][6] + 8L*M[4][7] + 8L*M[5][1] - 8L*M[5][2] + 64L*M[5][3] - 64L*M[5][4] + M[5][5] - M[5][6] + 8L*M[5][7] + 8L*M[6][1] - 8L*M[6][2] + 64L*M[6][3] - 64L*M[6][4] + M[6][5] - M[6][6] + 8L*M[6][7])/8L ;
C[1][0] = (2L*M[1][0] + 2L*M[1][1] + 2L*M[1][2] + 2L*M[1][3] + 2L*M[1][4] + 2L*M[1][5] + 2L*M[1][6] - 2L*M[2][0] - 2L*M[2][1] - 2L*M[2][2] - 2L*M[2][3] - 2L*M[2][4] - 2L*M[2][5] - 2L*M[2][6] + 4L*M[3][0] + 4L*M[3][1] + 4L*M[3][2] + 4L*M[3][3] + 4L*M[3][4] + 4L*M[3][5] + 4L*M[3][6] - 4L*M[4][0] - 4L*M[4][1] - 4L*M[4][2] - 4L*M[4][3] - 4L*M[4][4] - 4L*M[4][5] - 4L*M[4][6] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] + M[5][5] + M[5][6] - M[6][0] - M[6][1] - M[6][2] - M[6][3] - M[6][4] - M[6][5] - M[6][6])/2L ;
C[1][1] = (4L*M[1][1] - 4L*M[1][2] + 8L*M[1][3] - 8L*M[1][4] + 2L*M[1][5] - 2L*M[1][6] - 4L*M[2][1] + 4L*M[2][2] - 8L*M[2][3] + 8L*M[2][4] - 2L*M[2][5] + 2L*M[2][6] + 8L*M[3][1] - 8L*M[3][2] + 16L*M[3][3] - 16L*M[3][4] + 4L*M[3][5] - 4L*M[3][6] - 8L*M[4][1] + 8L*M[4][2] - 16L*M[4][3] + 16L*M[4][4] - 4L*M[4][5] + 4L*M[4][6] + 2L*M[5][1] - 2L*M[5][2] + 4L*M[5][3] - 4L*M[5][4] + M[5][5] - M[5][6] - 2L*M[6][1] + 2L*M[6][2] - 4L*M[6][3] + 4L*M[6][4] - M[6][5] + M[6][6])/4L ;
C[1][2] = (8L*M[1][1] + 8L*M[1][2] + 32L*M[1][3] + 32L*M[1][4] + 2L*M[1][5] + 2L*M[1][6] - 8L*M[2][1] - 8L*M[2][2] - 32L*M[2][3] - 32L*M[2][4] - 2L*M[2][5] - 2L*M[2][6] + 16L*M[3][1] + 16L*M[3][2] + 64L*M[3][3] + 64L*M[3][4] + 4L*M[3][5] + 4L*M[3][6] - 16L*M[4][1] - 16L*M[4][2] - 64L*M[4][3] - 64L*M[4][4] - 4L*M[4][5] - 4L*M[4][6] + 4L*M[5][1] + 4L*M[5][2] + 16L*M[5][3] + 16L*M[5][4] + M[5][5] + M[5][6] - 4L*M[6][1] - 4L*M[6][2] - 16L*M[6][3] - 16L*M[6][4] - M[6][5] - M[6][6])/8L ;
C[1][3] = (16L*M[1][1] - 16L*M[1][2] + 128L*M[1][3] - 128L*M[1][4] + 2L*M[1][5] - 2L*M[1][6] + 16L*M[1][7] - 16L*M[2][1] + 16L*M[2][2] - 128L*M[2][3] + 128L*M[2][4] - 2L*M[2][5] + 2L*M[2][6] - 16L*M[2][7] + 32L*M[3][1] - 32L*M[3][2] + 256L*M[3][3] - 256L*M[3][4] + 4L*M[3][5] - 4L*M[3][6] + 32L*M[3][7] - 32L*M[4][1] + 32L*M[4][2] - 256L*M[4][3] + 256L*M[4][4] - 4L*M[4][5] + 4L*M[4][6] - 32L*M[4][7] + 8L*M[5][1] - 8L*M[5][2] + 64L*M[5][3] - 64L*M[5][4] + M[5][5] - M[5][6] + 8L*M[5][7] - 8L*M[6][1] + 8L*M[6][2] - 64L*M[6][3] + 64L*M[6][4] - M[6][5] + M[6][6] - 8L*M[6][7])/16L ;
C[2][0] = (4L*M[1][0] + 4L*M[1][1] + 4L*M[1][2] + 4L*M[1][3] + 4L*M[1][4] + 4L*M[1][5] + 4L*M[1][6] + 4L*M[2][0] + 4L*M[2][1] + 4L*M[2][2] + 4L*M[2][3] + 4L*M[2][4] + 4L*M[2][5] + 4L*M[2][6] + 16L*M[3][0] + 16L*M[3][1] + 16L*M[3][2] + 16L*M[3][3] + 16L*M[3][4] + 16L*M[3][5] + 16L*M[3][6] + 16L*M[4][0] + 16L*M[4][1] + 16L*M[4][2] + 16L*M[4][3] + 16L*M[4][4] + 16L*M[4][5] + 16L*M[4][6] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] + M[5][5] + M[5][6] + M[6][0] + M[6][1] + M[6][2] + M[6][3] + M[6][4] + M[6][5] + M[6][6])/4L ;
C[2][1] = (8L*M[1][1] - 8L*M[1][2] + 16L*M[1][3] - 16L*M[1][4] + 4L*M[1][5] - 4L*M[1][6] + 8L*M[2][1] - 8L*M[2][2] + 16L*M[2][3] - 16L*M[2][4] + 4L*M[2][5] - 4L*M[2][6] + 32L*M[3][1] - 32L*M[3][2] + 64L*M[3][3] - 64L*M[3][4] + 16L*M[3][5] - 16L*M[3][6] + 32L*M[4][1] - 32L*M[4][2] + 64L*M[4][3] - 64L*M[4][4] + 16L*M[4][5] - 16L*M[4][6] + 2L*M[5][1] - 2L*M[5][2] + 4L*M[5][3] - 4L*M[5][4] + M[5][5] - M[5][6] + 2L*M[6][1] - 2L*M[6][2] + 4L*M[6][3] - 4L*M[6][4] + M[6][5] - M[6][6])/8L ;
C[2][2] = (16L*M[1][1] + 16L*M[1][2] + 64L*M[1][3] + 64L*M[1][4] + 4L*M[1][5] + 4L*M[1][6] + 16L*M[2][1] + 16L*M[2][2] + 64L*M[2][3] + 64L*M[2][4] + 4L*M[2][5] + 4L*M[2][6] + 64L*M[3][1] + 64L*M[3][2] + 256L*M[3][3] + 256L*M[3][4] + 16L*M[3][5] + 16L*M[3][6] + 64L*M[4][1] + 64L*M[4][2] + 256L*M[4][3] + 256L*M[4][4] + 16L*M[4][5] + 16L*M[4][6] + 4L*M[5][1] + 4L*M[5][2] + 16L*M[5][3] + 16L*M[5][4] + M[5][5] + M[5][6] + 4L*M[6][1] + 4L*M[6][2] + 16L*M[6][3] + 16L*M[6][4] + M[6][5] + M[6][6])/16L ;
C[2][3] = (32L*M[1][1] - 32L*M[1][2] + 256L*M[1][3] - 256L*M[1][4] + 4L*M[1][5] - 4L*M[1][6] + 32L*M[1][7] + 32L*M[2][1] - 32L*M[2][2] + 256L*M[2][3] - 256L*M[2][4] + 4L*M[2][5] - 4L*M[2][6] + 32L*M[2][7] + 128L*M[3][1] - 128L*M[3][2] + 1024L*M[3][3] - 1024L*M[3][4] + 16L*M[3][5] - 16L*M[3][6] + 128L*M[3][7] + 128L*M[4][1] - 128L*M[4][2] + 1024L*M[4][3] - 1024L*M[4][4] + 16L*M[4][5] - 16L*M[4][6] + 128L*M[4][7] + 8L*M[5][1] - 8L*M[5][2] + 64L*M[5][3] - 64L*M[5][4] + M[5][5] - M[5][6] + 8L*M[5][7] + 8L*M[6][1] - 8L*M[6][2] + 64L*M[6][3] - 64L*M[6][4] + M[6][5] - M[6][6] + 8L*M[6][7])/32L ;
C[3][0] = (8L*M[1][0] + 8L*M[1][1] + 8L*M[1][2] + 8L*M[1][3] + 8L*M[1][4] + 8L*M[1][5] + 8L*M[1][6] - 8L*M[2][0] - 8L*M[2][1] - 8L*M[2][2] - 8L*M[2][3] - 8L*M[2][4] - 8L*M[2][5] - 8L*M[2][6] + 64L*M[3][0] + 64L*M[3][1] + 64L*M[3][2] + 64L*M[3][3] + 64L*M[3][4] + 64L*M[3][5] + 64L*M[3][6] - 64L*M[4][0] - 64L*M[4][1] - 64L*M[4][2] - 64L*M[4][3] - 64L*M[4][4] - 64L*M[4][5] - 64L*M[4][6] + M[5][0] + M[5][1] + M[5][2] + M[5][3] + M[5][4] + M[5][5] + M[5][6] - M[6][0] - M[6][1] - M[6][2] - M[6][3] - M[6][4] - M[6][5] - M[6][6] + 8L*M[7][0] + 8L*M[7][1] + 8L*M[7][2] + 8L*M[7][3] + 8L*M[7][4] + 8L*M[7][5] + 8L*M[7][6])/8L ;
C[3][1] = (16L*M[1][1] - 16L*M[1][2] + 32L*M[1][3] - 32L*M[1][4] + 8L*M[1][5] - 8L*M[1][6] - 16L*M[2][1] + 16L*M[2][2] - 32L*M[2][3] + 32L*M[2][4] - 8L*M[2][5] + 8L*M[2][6] + 128L*M[3][1] - 128L*M[3][2] + 256L*M[3][3] - 256L*M[3][4] + 64L*M[3][5] - 64L*M[3][6] - 128L*M[4][1] + 128L*M[4][2] - 256L*M[4][3] + 256L*M[4][4] - 64L*M[4][5] + 64L*M[4][6] + 2L*M[5][1] - 2L*M[5][2] + 4L*M[5][3] - 4L*M[5][4] + M[5][5] - M[5][6] - 2L*M[6][1] + 2L*M[6][2] - 4L*M[6][3] + 4L*M[6][4] - M[6][5] + M[6][6] + 16L*M[7][1] - 16L*M[7][2] + 32L*M[7][3] - 32L*M[7][4] + 8L*M[7][5] - 8L*M[7][6])/16L ;
C[3][2] = (32L*M[1][1] + 32L*M[1][2] + 128L*M[1][3] + 128L*M[1][4] + 8L*M[1][5] + 8L*M[1][6] - 32L*M[2][1] - 32L*M[2][2] - 128L*M[2][3] - 128L*M[2][4] - 8L*M[2][5] - 8L*M[2][6] + 256L*M[3][1] + 256L*M[3][2] + 1024L*M[3][3] + 1024L*M[3][4] + 64L*M[3][5] + 64L*M[3][6] - 256L*M[4][1] - 256L*M[4][2] - 1024L*M[4][3] - 1024L*M[4][4] - 64L*M[4][5] - 64L*M[4][6] + 4L*M[5][1] + 4L*M[5][2] + 16L*M[5][3] + 16L*M[5][4] + M[5][5] + M[5][6] - 4L*M[6][1] - 4L*M[6][2] - 16L*M[6][3] - 16L*M[6][4] - M[6][5] - M[6][6] + 32L*M[7][1] + 32L*M[7][2] + 128L*M[7][3] + 128L*M[7][4] + 8L*M[7][5] + 8L*M[7][6])/32L ;
C[3][3] = (64L*M[1][1] - 64L*M[1][2] + 512L*M[1][3] - 512L*M[1][4] + 8L*M[1][5] - 8L*M[1][6] + 64L*M[1][7] - 64L*M[2][1] + 64L*M[2][2] - 512L*M[2][3] + 512L*M[2][4] - 8L*M[2][5] + 8L*M[2][6] - 64L*M[2][7] + 512L*M[3][1] - 512L*M[3][2] + 4096L*M[3][3] - 4096L*M[3][4] + 64L*M[3][5] - 64L*M[3][6] + 512L*M[3][7] - 512L*M[4][1] + 512L*M[4][2] - 4096L*M[4][3] + 4096L*M[4][4] - 64L*M[4][5] + 64L*M[4][6] - 512L*M[4][7] + 8L*M[5][1] - 8L*M[5][2] + 64L*M[5][3] - 64L*M[5][4] + M[5][5] - M[5][6] + 8L*M[5][7] - 8L*M[6][1] + 8L*M[6][2] - 64L*M[6][3] + 64L*M[6][4] - M[6][5] + M[6][6] - 8L*M[6][7] + 64L*M[7][1] - 64L*M[7][2] + 512L*M[7][3] - 512L*M[7][4] + 8L*M[7][5] - 8L*M[7][6] + 64L*M[7][7])/64L ;

}

def void Conv2DWinoSingleCOT(int32_pl m, int32_pl r, int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[m+r-1][m+r-1][CI][CO] transformedFilter, 
				   int64_al[N][H+zPadHLeft+zPadHRight-r+1][W+zPadWLeft+zPadWRight-r+1][CO] outArr) {

	int32_pl n = m + r - 1 ;

	int32_pl truH = H + zPadHLeft + zPadHRight ;
	int32_pl truW = W + zPadWLeft + zPadWRight ;
	int32_pl outH = truH - r + 1 ;
	int32_pl outW = truW - r + 1 ;

	int64_al[N][CI][truH][truW] truInputImg ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for i3=[0:truH] {
				for i4=[0:truW] {

					if ((zPadHLeft <= i3) && (i3 < (zPadHLeft + H)) && (zPadWLeft <= i4) && (i4 < (zPadWLeft + W))) {
						truInputImg[i1][i2][i3][i4] = inputArr[i1][i3-zPadHLeft][i4-zPadWLeft][i2] ;
					} else {
						truInputImg[i1][i2][i3][i4] = 0L ;
					} ;

				} ;
			} ;

		} ;
	} ;

	int32_pl TH ;
	int32_pl TW ;

	if (((truH - r + 1) % m) == 0) {
		TH = (truH - r + 1) / m ;
	} else {
		TH = ((truH - r + 1) / m) + 1 ;
	} ;

	if (((truW - r + 1) % m) == 0) {
		TW = (truW - r + 1) / m ;
	} else {
		TW = ((truW - r + 1) / m) + 1 ;
	} ;

	int64_al[N][CI][TH][TW][n][n] inputTiles ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] inputBlock ;
					int64_al[n][n] inputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < truH) && (indW < truW)) {
								inputBlock[i][j] = truInputImg[i1][i2][indH][indW] ;
							} else {
								inputBlock[i][j] = 0L ;
							} ;

						} ;
					} ;

					if (r == 3) {
						WinogradM4R3ImageTransform(inputBlock, inputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5ImageTransform(inputBlock, inputTransformed) ;
					} ;
					} ;

					for i=[0:n] {
						for j=[0:n] {
							inputTiles[i1][i2][th][tw][i][j] = inputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, inputBlock) ;
					ClearMemSecret2(n, n, inputTransformed) ;

				} ;
			} ;
		} ;
	} ;

	ClearMemSecret4(N, CI, truH, truW, truInputImg) ;

	int32_pl s1 = TH*TW ;
	int32_pl s2 = CO*CI*n*n ;

	int64_al[s1][s2] mul1 ;
	int64_al[s2][1] mul2 ;
	int64_al[s1][s2] mulout ;

	for co=[0:CO] {

		for th=[0:TH] {
			for tw=[0:TW] {

				for ci=[0:CI] {
					for i=[0:n] {
						for j=[0:n] {

							mul1[th*TW + tw][co*CI*n*n + ci*n*n + i*n + j] = inputTiles[0][ci][th][tw][i][j] ;
							mul2[co*CI*n*n + ci*n*n + i*n + j][0] = transformedFilter[i][j][ci][co] ;

						} ;
					} ;
				} ;

			} ;
		} ;
	} ;

	ClearMemSecret6(N, CI, TH, TW, n, n, inputTiles) ;

	WinogradHadamard(s1, s2, mul1, mul2, mulout) ;
	ClearMemSecret2(s1, s2, mul1) ;
	ClearMemSecret2(s1, s2, mul2) ;

	int64_al[CO][CI][TH][TW][m][m] outputTiles ;
	int64_al[CO][TH][TW][m][m] reducedTiles ;

	for i2=[0:CO] {
		for i3=[0:CI] {
			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] outputBlock ;
					int64_al[m][m] outputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							outputBlock[i][j] = mulout[th*TW + tw][i2*CI*n*n + i3*n*n + i*n + j]
						} ;
					} ;

					if (r == 3) {
						WinogradM4R3OutputTransform(outputBlock, outputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5OutputTransform(outputBlock, outputTransformed) ;
					} ;
					} ;

					for i=[0:m] {
						for j=[0:m] {
							outputTiles[i2][i3][th][tw][i][j] = outputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, outputBlock) ;
					ClearMemSecret2(m, m, outputTransformed) ;

				} ;
			} ;
		} ;
	} ;

	ClearMemSecret2(s1, s2, mulout) ;

	for i2=[0:CO] {
		for th=[0:TH] {
			for tw=[0:TW] {
				for i=[0:m] {
					for j=[0:m] {

						reducedTiles[i2][th][tw][i][j] = outputTiles[i2][0][th][tw][i][j] ;

						for i3=[1:CI] {
							reducedTiles[i2][th][tw][i][j] = reducedTiles[i2][th][tw][i][j] + outputTiles[i2][i3][th][tw][i][j] ; 
						} ;

					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret6(CO, CI, TH, TW, m, m, outputTiles) ;

	for i2=[0:CO] {
		for th=[0:TH] {
			for tw=[0:TW] {
				int32_pl i3 = th*m ;
				int32_pl i4 = tw*m ;

				for i=[0:m] {
					for j=[0:m] {
						int32_pl indH ;
						int32_pl indW ;

						indH = (th*m) + i ;
						indW = (tw*m) + j ;

						if ((indH < outH) && (indW < outW)) {
							outArr[0][indH][indW][i2] = reducedTiles[i2][th][tw][i][j] ;
						} ;

					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret5(CO, TH, TW, m, m, reducedTiles) ;
}

def void Conv2DWinoElemWiseMul7(int32_pl m, int32_pl r, int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[m+r-1][m+r-1][CI][CO] transformedFilter, 
				   int64_al[N][H+zPadHLeft+zPadHRight-r+1][W+zPadWLeft+zPadWRight-r+1][CO] outArr) {

	int32_pl n = m + r - 1 ;

	int32_pl truH = H + zPadHLeft + zPadHRight ;
	int32_pl truW = W + zPadWLeft + zPadWRight ;
	int32_pl outH = truH - r + 1 ;
	int32_pl outW = truW - r + 1 ;

	int64_al[N][CI][truH][truW] truInputImg ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for i3=[0:truH] {
				for i4=[0:truW] {

					if ((zPadHLeft <= i3) && (i3 < (zPadHLeft + H)) && (zPadWLeft <= i4) && (i4 < (zPadWLeft + W))) {
						truInputImg[i1][i2][i3][i4] = inputArr[i1][i3-zPadHLeft][i4-zPadWLeft][i2] ;
					} else {
						truInputImg[i1][i2][i3][i4] = 0L ;
					} ;

				} ;
			} ;

		} ;
	} ;

	int32_pl TH ;
	int32_pl TW ;

	if (((truH - r + 1) % m) == 0) {
		TH = (truH - r + 1) / m ;
	} else {
		TH = ((truH - r + 1) / m) + 1 ;
	} ;

	if (((truW - r + 1) % m) == 0) {
		TW = (truW - r + 1) / m ;
	} else {
		TW = ((truW - r + 1) / m) + 1 ;
	} ;

	int64_al[N][CI][TH][TW][n][n] inputTiles ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] inputBlock ;
					int64_al[n][n] inputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < truH) && (indW < truW)) {
								inputBlock[i][j] = truInputImg[i1][i2][indH][indW] ;
							} else {
								inputBlock[i][j] = 0L ;
							} ;

						} ;
					} ;

					if (r == 3) {
						WinogradM4R3ImageTransform(inputBlock, inputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5ImageTransform(inputBlock, inputTransformed) ;
					} ; 
					} ;

					for i=[0:n] {
						for j=[0:n] {
							inputTiles[i1][i2][th][tw][i][j] = inputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, inputBlock) ;
					ClearMemSecret2(n, n, inputTransformed) ;

				} ;
			} ;
		} ;
	} ;

	ClearMemSecret4(N, CI, truH, truW, truInputImg) ;

	int64_al[N][CO][CI][TH][TW][n][n] mul1 ;
	int64_al[N][CO][CI][TH][TW][n][n] mul2 ;
	int64_al[N][CO][CI][TH][TW][n][n] mulout ;

	for i1=[0:N] {
		for i2=[0:CO] {
			for i3=[0:CI] {
				for th=[0:TH] {
					for tw=[0:TW] {
						for i=[0:n] {
							for j=[0:n] {
								mul1[i1][i2][i3][th][tw][i][j] = inputTiles[i1][i3][th][tw][i][j] ;
								mul2[i1][i2][i3][th][tw][i][j] = transformedFilter[i][j][i3][i2] ;
							} ;
						} ;
					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret6(N, CI, TH, TW, n, n, inputTiles) ;

	ElemWiseMul7(N, CO, CI, TH, TW, n, n, mul1, mul2, mulout) ;

	ClearMemSecret7(N, CO, CI, TH, TW, n, n, mul1) ;
	ClearMemSecret7(N, CO, CI, TH, TW, n, n, mul2) ;

	int64_al[N][CO][CI][TH][TW][m][m] outputTiles ;
	int64_al[N][CO][TH][TW][m][m] reducedTiles ;

	for i1=[0:N] {
		for i2=[0:CO] {
			for i3=[0:CI] {
				for th=[0:TH] {
					for tw=[0:TW] {

						int64_al[n][n] outputBlock ;
						int64_al[m][m] outputTransformed ;

						for i=[0:n] {
							for j=[0:n] {
								outputBlock[i][j] = mulout[i1][i2][i3][th][tw][i][j] ;
							} ;
						} ;



						if (r == 3) {
							WinogradM4R3OutputTransform(outputBlock, outputTransformed) ;
						} else {
						if (r == 5) {
							WinogradM2R5OutputTransform(outputBlock, outputTransformed) ;
						} ;
						} ;

						for i=[0:m] {
							for j=[0:m] {
								outputTiles[i1][i2][i3][th][tw][i][j] = outputTransformed[i][j] ;
							} ;
						} ;

						ClearMemSecret2(n, n, outputBlock) ;
						ClearMemSecret2(m, m, outputTransformed) ;

					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret7(N, CO, CI, TH, TW, n, n, mulout) ;

	for i1=[0:N] {
		for i2=[0:CO] {
			for th=[0:TH] {
				for tw=[0:TW] {
					for i=[0:m] {
						for j=[0:m] {

							reducedTiles[i1][i2][th][tw][i][j] = outputTiles[i1][i2][0][th][tw][i][j] ;

							for i3=[1:CI] {
								reducedTiles[i1][i2][th][tw][i][j] = reducedTiles[i1][i2][th][tw][i][j] + outputTiles[i1][i2][i3][th][tw][i][j] ; 
							} ;

						} ;
					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret7(N, CO, CI, TH, TW, m, m, outputTiles) ;

	for i1=[0:N] {
		for i2=[0:CO] {

			for th=[0:TH] {
				for tw=[0:TW] {
					int32_pl i3 = th*m ;
					int32_pl i4 = tw*m ;

					for i=[0:m] {
						for j=[0:m] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < outH) && (indW < outW)) {
								outArr[i1][indH][indW][i2] = reducedTiles[i1][i2][th][tw][i][j] ;
							} ;

						} ;
					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret6(N, CO, TH, TW, m, m, reducedTiles) ;
}

def void Conv2DWinoWrong(int32_pl m, int32_pl r, int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[m+r-1][m+r-1][CI][CO] transformedFilter, 
				   int64_al[N][H+zPadHLeft+zPadHRight-r+1][W+zPadWLeft+zPadWRight-r+1][CO] outArr) {

	int32_pl n = m + r - 1 ;

	int32_pl truH = H + zPadHLeft + zPadHRight ;
	int32_pl truW = W + zPadWLeft + zPadWRight ;
	int32_pl outH = truH - r + 1 ;
	int32_pl outW = truW - r + 1 ;

	int64_al[N][CI][truH][truW] truInputImg ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for i3=[0:truH] {
				for i4=[0:truW] {

					if ((zPadHLeft <= i3) && (i3 < (zPadHLeft + H)) && (zPadWLeft <= i4) && (i4 < (zPadWLeft + W))) {
						truInputImg[i1][i2][i3][i4] = inputArr[i1][i3-zPadHLeft][i4-zPadWLeft][i2] ;
					} else {
						truInputImg[i1][i2][i3][i4] = 0L ;
					} ;

				} ;
			} ;

		} ;
	} ;

	int32_pl TH ;
	int32_pl TW ;

	if (((truH - r + 1) % m) == 0) {
		TH = (truH - r + 1) / m ;
	} else {
		TH = ((truH - r + 1) / m) + 1 ;
	} ;

	if (((truW - r + 1) % m) == 0) {
		TW = (truW - r + 1) / m ;
	} else {
		TW = ((truW - r + 1) / m) + 1 ;
	} ;

	int64_al[N][CI][TH][TW][n][n] inputTiles ;

	for i1=[0:N] {
		for i2=[0:CI] {

			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] inputBlock ;
					int64_al[n][n] inputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < truH) && (indW < truW)) {
								inputBlock[i][j] = truInputImg[i1][i2][indH][indW] ;
							} else {
								inputBlock[i][j] = 0L ;
							} ;

						} ;
					} ;

					if (r == 3) {
						WinogradM4R3ImageTransform(inputBlock, inputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5ImageTransform(inputBlock, inputTransformed) ;
					} ;
					} ;

					for i=[0:n] {
						for j=[0:n] {
							inputTiles[i1][i2][th][tw][i][j] = inputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, inputBlock) ;
					ClearMemSecret2(n, n, inputTransformed) ;

				} ;
			} ;
		} ;
	} ;

	ClearMemSecret4(N, CI, truH, truW, truInputImg) ;

	int32_pl s1 = CO*TH*TW ;
	int32_pl s2 = CI ;
	int32_pl s3 = n*n ;

	int64_al[s1][s2] mul1 ;
	int64_al[s2][s3] mul2 ;
	int64_al[s1][s3] reducedMul ;

	for co=[0:CO] {
		for th=[0:TH] {
			for tw=[0:TW] {

				for ci=[0:CI] {

					for i=[0:n] {
						for j=[0:n] {

							mul1[co*TH*TW + th*TW + tw][ci] = inputTiles[0][ci][th][tw][i][j] ;
							mul2[ci][i*n+j] = transformedFilter[i][j][ci][co] ;

						} ;
					} ;

				} ;

			} ;
		} ;
	} ;

	MatMul2D(s1, s2, s3, mul1, mul2, reducedMul, false) ;

	ClearMemSecret6(N, CI, TH, TW, n, n, inputTiles) ;
	ClearMemSecret2(s1, s2, mul1) ;
	ClearMemSecret2(s2, s3, mul2) ;

	for i2=[0:CO] {
		for th=[0:TH] {
			for tw=[0:TW] {

				int64_al[n][n] outputBlock ;
				int64_al[m][m] outputTransformed ;

				for i=[0:n] {
					for j=[0:n] {
						outputBlock[i][j] = reducedMul[i2*TH*TW + th*TW + tw][i*n+j]
					} ;
				} ;

				if (r == 3) {
					WinogradM4R3OutputTransform(outputBlock, outputTransformed) ;
				} else {
				if (r == 5) {
					WinogradM2R5OutputTransform(outputBlock, outputTransformed) ;
				} ;
				} ;

				for i=[0:m] {
					for j=[0:m] {
						int32_pl indH ;
						int32_pl indW ;

						indH = (th*m) + i ;
						indW = (tw*m) + j ;

						if ((indH < outH) && (indW < outW)) {
							outArr[0][indH][indW][i2] = outputTransformed[i][j] ;
						} ;
					} ;
				} ;

				ClearMemSecret2(n, n, outputBlock) ;
				ClearMemSecret2(m, m, outputTransformed) ;
			} ;
		} ;
	} ;

	ClearMemSecret2(s2, s3, reducedMul) ;
}

def void Conv2DWinoDW(int32_pl m, int32_pl r, int32_pl N, int32_pl H, int32_pl W, int32_pl C, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				   int64_al[N][H][W][C] inputArr, 
				   int64_al[m+r-1][m+r-1][1][C] transformedFilter, 
				   int64_al[N][H+zPadHLeft+zPadHRight-r+1][W+zPadWLeft+zPadWRight-r+1][C] outArr) {

	int32_pl n = m + r - 1 ;

	int32_pl truH = H + zPadHLeft + zPadHRight ;
	int32_pl truW = W + zPadWLeft + zPadWRight ;
	int32_pl outH = truH - r + 1 ;
	int32_pl outW = truW - r + 1 ;

	int64_al[N][C][truH][truW] truInputImg ;

	for i1=[0:N] {
		for i2=[0:C] {

			for i3=[0:truH] {
				for i4=[0:truW] {

					if ((zPadHLeft <= i3) && (i3 < (zPadHLeft + H)) && (zPadWLeft <= i4) && (i4 < (zPadWLeft + W))) {
						truInputImg[i1][i2][i3][i4] = inputArr[i1][i3-zPadHLeft][i4-zPadWLeft][i2] ;
					} else {
						truInputImg[i1][i2][i3][i4] = 0L ;
					} ;

				} ;
			} ;

		} ;
	} ;

	int32_pl TH ;
	int32_pl TW ;

	if (((truH - r + 1) % m) == 0) {
		TH = (truH - r + 1) / m ;
	} else {
		TH = ((truH - r + 1) / m) + 1 ;
	} ;

	if (((truW - r + 1) % m) == 0) {
		TW = (truW - r + 1) / m ;
	} else {
		TW = ((truW - r + 1) / m) + 1 ;
	} ;

	int64_al[N][C][TH][TW][n][n] inputTiles ;

	for i1=[0:N] {
		for i2=[0:C] {

			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] inputBlock ;
					int64_al[n][n] inputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < truH) && (indW < truW)) {
								inputBlock[i][j] = truInputImg[i1][i2][indH][indW] ;
							} else {
								inputBlock[i][j] = 0L ;
							} ;

						} ;
					} ;

					if (r == 3) {
						WinogradM4R3ImageTransform(inputBlock, inputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5ImageTransform(inputBlock, inputTransformed) ;
					} ;
					} ;

					for i=[0:n] {
						for j=[0:n] {
							inputTiles[i1][i2][th][tw][i][j] = inputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, inputBlock) ;
					ClearMemSecret2(n, n, inputTransformed) ;

				} ;
			} ;
		} ;
	} ;

	ClearMemSecret4(N, C, truH, truW, truInputImg) ;

	int64_al[N][C][TH][TW][n][n] mul1 ;
	int64_al[N][C][TH][TW][n][n] mul2 ;
	int64_al[N][C][TH][TW][n][n] mulout ;

	for i1=[0:N] {
		for i2=[0:C] {
			for th=[0:TH] {
				for tw=[0:TW] {
					for i=[0:n] {
						for j=[0:n] {
							mul1[i1][i2][th][tw][i][j] = inputTiles[i1][i2][th][tw][i][j] ;
							mul2[i1][i2][th][tw][i][j] = transformedFilter[i][j][0][i2] ;
						} ;
					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret6(N, C, TH, TW, n, n, inputTiles) ;

	ElemWiseMul6(N, C, TH, TW, n, n, mul1, mul2, mulout) ;

	ClearMemSecret6(N, C, TH, TW, n, n, mul1) ;
	ClearMemSecret6(N, C, TH, TW, n, n, mul2) ;

	int64_al[N][C][TH][TW][m][m] outputTiles ;

	for i1=[0:N] {
		for i2=[0:C] {
			for th=[0:TH] {
				for tw=[0:TW] {

					int64_al[n][n] outputBlock ;
					int64_al[m][m] outputTransformed ;

					for i=[0:n] {
						for j=[0:n] {
							outputBlock[i][j] = mulout[i1][i2][th][tw][i][j] ;
						} ;
					} ;

					if (r == 3) {
						WinogradM4R3OutputTransform(outputBlock, outputTransformed) ;
					} else {
					if (r == 5) {
						WinogradM2R5OutputTransform(outputBlock, outputTransformed) ;
					} ;
					} ;

					for i=[0:m] {
						for j=[0:m] {
							outputTiles[i1][i2][th][tw][i][j] = outputTransformed[i][j] ;
						} ;
					} ;

					ClearMemSecret2(n, n, outputBlock) ;
					ClearMemSecret2(m, m, outputTransformed) ;
				} ;
			} ;
		} ;
	} ;

	for i1=[0:N] {
		for i2=[0:C] {
			for th=[0:TH] {
				for tw=[0:TW] {
					int32_pl i3 = th*m ;
					int32_pl i4 = tw*m ;

					for i=[0:m] {
						for j=[0:m] {
							int32_pl indH ;
							int32_pl indW ;

							indH = (th*m) + i ;
							indW = (tw*m) + j ;

							if ((indH < outH) && (indW < outW)) {
								outArr[i1][indH][indW][i2] = outputTiles[i1][i2][th][tw][i][j] ;
							} ;

						} ;
					} ;
				} ;
			} ;
		} ;
	} ;

	ClearMemSecret6(N, C, TH, TW, m, m, outputTiles) ;
}

def void Conv2DWinoWrapper(int32_pl m, int32_pl r, int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[m+r-1][m+r-1][CI/G][CO] transformedFilter, 
				   int64_al[N][H+zPadHLeft+zPadHRight-r+1][W+zPadWLeft+zPadWRight-r+1][CO] outArr) {
	if (G == CI) {
		Conv2DWinoDW(m, r, N, H, W, CI, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, inputArr, transformedFilter, outArr) ;
	} else {
		Conv2DWinoElemWiseMul7(m, r, N, H, W, CI, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, inputArr, transformedFilter, outArr) ;
	} ;
}